<?xml version="1.0" encoding="utf-8"?>
<Board ID="VIRTUALFAB_SSD1963_TY700"
   Description="VIRTUALFAB_SSD1963_TY700 - SSD1963 TY700 7in. 800x480"
   Type="Display"
   Img="Disp_VirtualFab_SSD1963-TY700.png"
   Width="800"
   Height="480"
   DefaultOrientation="0">
  <Note>
  </Note>
  <Project>
    <Folder Name="Header Files/Display Driver">
      <AddFile>$MAL/Include/Graphics/DisplayDriver.h</AddFile>
      <AddFile>$USERTEMPLATESFOLDER/Boards/MPP/drvSSD1963.h</AddFile>
      <AddFile>$USERTEMPLATESFOLDER/Boards/MPP/SSD1963_CMD.h</AddFile>
    </Folder>
    <Folder Name="Source Files/Display Driver">
      <AddFile>$USERTEMPLATESFOLDER/Boards/MPP/drvSSD1963.c</AddFile>
      <AddFile>$MAL/Graphics/Drivers/gfxepmp.c</AddFile>
    </Folder>
    <Folder Name="Header Files/Board Support Package">
      <AddFile>$MAL/../Board Support Package/TouchScreen.h</AddFile>
      <AddFile>$USERTEMPLATESFOLDER/Boards/MPP/TouchScreenADS7843.h</AddFile>
    </Folder>
    <Folder Name="Source Files/Board Support Package">
      <AddFile>$MAL/../Board Support Package/TouchScreen.c</AddFile>
      <AddFile>$USERTEMPLATESFOLDER/Boards/MPP/TouchScreenADS7843.c</AddFile>
    </Folder>
  </Project>
  <Code>
    <Section Name="HardwareProfileHead">
      <![CDATA[
#define DISPLAY_CONTROLLER SSD1963
#define TY700TFT800480 1
#define DISPLAY_PANEL TY700TFT800480
#define USE_DRV_BAR
]]>
    </Section>
    <Section Name="HardwareProfileHead" Option="chkPMP16">
      <![CDATA[
#define USE_16BIT_PMP
]]>
    </Section>
    <Section Name="HardwareProfileHead" Option="chkPMP8">
      <![CDATA[
#define USE_8BIT_PMP
]]>
    </Section>
    <Section Name="HardwareProfile">
      <![CDATA[
      
// *********************************************************************
// * TOUCH PANEL SETTINGS
// *********************************************************************
#define LANG_ITA    // Per la calibrazione
//#define TOUCHSCREEN_RESISTIVE_SWAP_XY
#define TOUCHSCREEN_RESISTIVE_FLIP_X
//#define TOUCHSCREEN_RESISTIVE_FLIP_Y
#define TOUCHPANEL_NUMBER_SAMPLES_PER_POINT 1
#define USE_HWTP_IC
//#define USE_INTERNAL_ADC_FOR_TP

//#define DEBUG
#ifdef DEBUG
#define LED_IO _LATE9
#define LED_IO_TRIS _TRISE9
#endif

#define ADS7843     1
#define TSC2046     2
#define HWTP_IC    TSC2046
#define HW_TP_SPI_INIT
//#define HW_TP_USE_HARDWARE_SPI

#if defined(HW_TP_USE_HARDWARE_SPI)
#define HWTP_SD_SPI_OPEN	OpenSPI2	// Function name for opening SPIx
#define HWTP_SD_SPI_CLOSE	CloseSPI2	// Function name for opening SPIx
#define HWTP_SPI_SPIRBF	SPI2STATbits.SPIRBF     // SPIx Receive Buffer Full Status bit
#define HWTP_SPI_SPIROV SPI2STATbits.SPIROV     // Receive Overflow Flag bit
#define HWTP_SPI_SPIBUF SPI2BUF			// buffer name for reading SPIx
#define HWTP_SPI_WRITE 	WriteSPI2		// Function name for Writing to SPIx
#else
#define HWTP_SPI_SDO        _LATG7
#define HWTP_SPI_SDO_TRIS   _TRISG7
#define HWTP_SPI_SDI        _RG8
#define HWTP_SPI_SDI_TRIS   _TRISG8
#define HWTP_SPI_SCK        _LATG6
#define HWTP_SPI_SCK_TRIS   _TRISG6
#define mHWTP_SpiPut(c)    BitBangSPIPut(c)
#define mHWTP_SpiGet()     BitBangSPIGet()
#endif

#define HWTP_CS_LAT     _LATC2
#define HWTP_CS_TRIS    _TRISC2
#define HWTP_INT_TRIS   _TRISB12    
#define HWTP_INT        _RB12

// ********************************************************************
// * Touch Screen Non-Volatile Memory Storage Macros
// ********************************************************************
#define ADDRESS_RESISTIVE_TOUCH_VERSION	(unsigned long)0xFFFFFFFE
#define ADDRESS_RESISTIVE_TOUCH_ULX   (unsigned long)0xFFFFFFFC
#define ADDRESS_RESISTIVE_TOUCH_ULY   (unsigned long)0xFFFFFFFA
#define ADDRESS_RESISTIVE_TOUCH_URX   (unsigned long)0xFFFFFFF8
#define ADDRESS_RESISTIVE_TOUCH_URY   (unsigned long)0xFFFFFFF6

#define ADDRESS_RESISTIVE_TOUCH_LLX   (unsigned long)0xFFFFFFF4
#define ADDRESS_RESISTIVE_TOUCH_LLY   (unsigned long)0xFFFFFFF2
#define ADDRESS_RESISTIVE_TOUCH_LRX   (unsigned long)0xFFFFFFF0
#define ADDRESS_RESISTIVE_TOUCH_LRY   (unsigned long)0xFFFFFFEE

#define NVMSectorErase                  (NULL)
#define NVMWrite                        (NULL)
#define NVMRead                         (NULL)

// ********************************************************************
// * HARDWARE PROFILE FOR DISPLAY CONTROLLER INTERFACE 
// ********************************************************************
#define DISP_ORIENTATION          [DISP_ORIENTATION]
#if (DISP_ORIENTATION == 0)	
#elif (DISP_ORIENTATION == 90)	
#elif (DISP_ORIENTATION == 180)	
#elif (DISP_ORIENTATION == 270)	
#endif	
#define DISP_HOR_RESOLUTION       800
#define DISP_VER_RESOLUTION       480
#define DISP_DATA_WIDTH           16
#define GFX_LCD_TYPE              GFX_LCD_TFT
#define USE_GFX_PMP

// Extended address lines
//#define DisplayAddr0Config()        TRISDbits.TRISD3 = 0
//#define DisplaySetAddr0()           LATDbits.LATD3 = 1
//#define DisplayClearAddr0()         LATDbits.LATD3 = 0

//#define DisplayAddr17Config()       TRISGbits.TRISG14 = 0
//#define DisplaytSetAddr17()         TRISGbits.TRISG14 = 1
//#define DisplayClearAddr17()        TRISGbits.TRISG14 = 0

// *********************************************************************
// * Overview: Horizontal synchronization timing in pixels
// *                  (from the glass datasheet).
// *********************************************************************
#define DISP_HOR_PULSE_WIDTH         1
#define DISP_HOR_BACK_PORCH        210
#define DISP_HOR_FRONT_PORCH        45

// *********************************************************************
// * Overview: Vertical synchronization timing in lines
// *                  (from the glass datasheet).
// *********************************************************************
#define DISP_VER_PULSE_WIDTH        1
#define DISP_VER_BACK_PORCH        34
#define DISP_VER_FRONT_PORCH       10

// *********************************************************************
// * Definition for SPI interface for SSD1963
// * Hardware dependent!
// *********************************************************************
#define GPIO3 3
#define GPIO2 2
#define GPIO1 1
#define GPIO0 0
#define LCD_RESET    0
#define LCD_SPENA    0
#define LCD_SPCLK    0
#define LCD_SPDAT    0

// *********************************************************************
// * PMP SETTINGS
// *********************************************************************
#define PMP_DATA_SETUP_TIME 1
#define PMP_DATA_WAIT_TIME 2
#define PMP_DATA_HOLD_TIME 3

#define BACKLIGHT_ENABLE_LEVEL    1
#define BACKLIGHT_DISABLE_LEVEL   0

// Definitions for reset pin
#define DisplayResetConfig()        TRISBCLR = _TRISB_TRISB10_MASK    
#define DisplayResetEnable()        LATBCLR = _LATB_LATB10_MASK
#define DisplayResetDisable()       LATBSET = _LATB_LATB10_MASK

// Definitions for RS pin
#define DisplayCmdDataConfig()      TRISGCLR = _TRISG_TRISG12_MASK
#define DisplaySetCommand()         LATGCLR = _LATG_LATG12_MASK
#define DisplaySetData()            LATGSET = _LATG_LATG12_MASK

// Definitions for CS pin
#define DisplayConfig()             TRISBCLR = _TRISB_TRISB13_MASK
#define DisplayEnable()             LATBCLR = _LATB_LATB13_MASK
#define DisplayDisable()            LATBSET = _LATB_LATB13_MASK

// Definitions for FLASH CS pin
#define DisplayFlashConfig()          
#define DisplayFlashEnable()        
#define DisplayFlashDisable()       

// Definitions for POWER ON pin
#define DisplayPowerConfig()        //TRISDCLR = _TRISD_TRISD4_MASK
#define DisplayPowerOn()            //LATDCLR = _LATD_LATD4_MASK
#define DisplayPowerOff()           //LATDSET = _LATD_LATD4_MASK
        
// Definitions for backlight control pin
#define DisplayBacklightConfig()    (TRISDbits.TRISD4 = 0)  
#define DisplayBacklightOn()        (LATDbits.LATD4 = BACKLIGHT_ENABLE_LEVEL)
#define DisplayBacklightOff()       (LATDbits.LATD4 = BACKLIGHT_DISABLE_LEVEL)   
]]>
    </Section>
  </Code>
</Board>
