<?xml version="1.0" encoding="utf-8" ?>
<VGDDCodeTemplate>
    <ProjectTemplates>
        <Header>
            <![CDATA[
#ifndef	_VGDD_SCREENS_H_
#define	 _VGDD_SCREENS_H_
#include <gfx_gol.h>
[HEADERSINCLUDES]
]]>
        </Header>
        <CodeHead>
            <![CDATA[
// VGDD Project [PROJECT_NAME] using MLA 
//
// This code is automatically generated by
//    Visual Graphics Display Designer
//
//       (c) 2011-2016 VirtualFab
//
//        DO NOT MANUALLY MODIFY
//
#define _VGDD_
#include "vgdd_main.h"
#include "gfx_config.h"
#include "[PROJECTFILENAME_SCREENSH]"
]]>
        </CodeHead>
        <TextDeclare>
            <Null>
                <Header>
                </Header>
                <CodeHead>
                </CodeHead>
            </Null>
            <ConstXcharArray>
                <Header>
                </Header>
                <CodeHead>
                    <![CDATA[
const GFX_XCHAR [CONTROLID]_Text[] = [QTEXT]; // [TEXT]
]]>
                </CodeHead>
            </ConstXcharArray>
            <RamXcharArray>
                <Header>
                    <![CDATA[
extern GFX_XCHAR [CONTROLID]_Text[];
]]>
                </Header>
                <CodeHead>
                    <![CDATA[
GFX_XCHAR [CONTROLID]_Text[[CHARMAX]] = [QTEXT]; // [TEXT]
]]>
                </CodeHead>
            </RamXcharArray>
            <ExternXcharPointer>
                <Header>
                </Header>
                <CodeHead>
                    <![CDATA[
extern GFX_XCHAR *[CONTROLID_NOINDEX]_Text;
]]>
                </CodeHead>
            </ExternXcharPointer>
            <ExternRamXCharArray>
                <Header>
                </Header>
                <CodeHead>
                    <![CDATA[
extern GFX_XCHAR [CONTROLID_NOINDEX]_Text[];
]]>
                </CodeHead>
            </ExternRamXCharArray>
        </TextDeclare>
        <MatrixTextDeclare>
            <ConstXcharArray>
                <![CDATA[
const GFX_XCHAR [CONTROLID]_Text[][] = [QTEXT]; // [TEXT]
]]>
            </ConstXcharArray>
            <RamXcharArray>
                <![CDATA[
GFX_XCHAR [CONTROLID]_Text[][[CHARMAX]] = [QTEXT]; // [TEXT]
]]>
            </RamXcharArray>
            <ExternXcharPointer>
                <![CDATA[
extern GFX_XCHAR *[CONTROLID_NOINDEX]_Text[];
]]>
            </ExternXcharPointer>
            <ExternRamXCharArray>
                <![CDATA[
extern GFX_XCHAR [CONTROLID_NOINDEX]_Text[][];
]]>
            </ExternRamXCharArray>
        </MatrixTextDeclare>
        <BitmapsDeclare>
            <PointerName>
                <![CDATA[
p[BITMAPNAME]
]]>
            </PointerName>
            <PointerInit>
                <![CDATA[
    //[POINTERNAME]=(void *)&[BITMAP]; // Uncomment this line to initialize the bitmap pointer here, otherwise do it in your code before calling this CreateXXX()
]]>
            </PointerInit>
            <Bitmaps>
                <![CDATA[
extern void *[POINTERNAME]; // Pointer to bitmap [BITMAPNAME]
]]>
            </Bitmaps>
            <BitmapsGroup>
                <GroupStart>
                    <![CDATA[
[EMPTYLINE]
// Picture Group [GROUPNAME]
GFX_GOL_PICTURECONTROL * [GROUPNAME][] = {
]]>
                </GroupStart>
                <GroupItem>
                    <![CDATA[
    (void *) &[BITMAPNAME]
]]>
                </GroupItem>
                <GroupEnd>
                    <![CDATA[
};
]]>
                </GroupEnd>
                <GroupHeader>
                    <![CDATA[
extern GFX_GOL_PICTURECONTROL * [GROUPNAME][];
#define [GROUPNAME_UPPER]_NUMBITMAPS [GROUP_BITMAP_COUNT]
]]>
                </GroupHeader>
            </BitmapsGroup>
        </BitmapsDeclare>
        <FontsDeclare>
            <FontFilter>
                <Header>
                    <![CDATA[
#define [FONT]_FILTERTABLE_SIZE [FILTERTABLE_SIZE]
extern const uint16_t [FONT]_FilterTable[[FONT]_FILTERTABLE_SIZE];
]]>
                </Header>
                <CodeHead>
                    <![CDATA[
const uint16_t [FONT]_FilterTable[[FILTERTABLE_SIZE]] = {[FILTERTABLE]}; // [FILTERTABLE_CHARS]
]]>
                </CodeHead>
            </FontFilter>
            <FLASH_VGDD>
                <Header>
                    <![CDATA[
extern const FONT_FLASH [FONT]; // SIZE=[FONTSIZE] bytes
]]> 
                </Header>
                <CodeHead>
                    <![CDATA[
extern const char L[FONT][] __attribute__((aligned(2)));
const FONT_FLASH [FONT] = {0, L[FONT]};
]]>
                </CodeHead>
                <Code>
                    <![CDATA[
[EMPTYLINE]
// [FONT]: [FONTDEF] - Size: [FONTSIZE] bytes - VGDD_FLASH Font definition
const char L[FONT][] __attribute__((aligned(2))) = {
    [HEX_LINES]
};
// [FONT] - Size: [FONTSIZE] bytes - End of VGDD_FLASH Font definition
]]>
                </Code>
            </FLASH_VGDD>
            <FLASH>
                <Header>
                    <![CDATA[
extern const FONT_FLASH [FONT];
]]>
                </Header>
            </FLASH>
            <EXTERNAL>
                <Header>
                    <![CDATA[
extern const FONT_FLASH [FONT];
]]>                </Header>
            </EXTERNAL>
            <BINFONT_ON_SDFAT>
                <CodeHead>
                    <![CDATA[
const FONT_ON_SD [FONT] = {BINFONT_ON_SDFAT, "[FONTSDFILENAME]"};
]]>                </CodeHead>
            </BINFONT_ON_SDFAT>
        </FontsDeclare>
        <CreateSchemes>
            <Header>
                <![CDATA[
extern GFX_GOL_OBJ_SCHEME GOLScheme_[SCHEME_NAME];
void CreateScheme_[SCHEME_NAME](void);
]]>
            </Header>
            <CodeHead>
                GFX_GOL_OBJ_SCHEME GOLScheme_[SCHEME_NAME];
            </CodeHead>
            <Code>
                <![CDATA[
void CreateScheme_[SCHEME_NAME](void) {
    GOLScheme_[SCHEME_NAME].Color0 = [COLOR0]; // [COLOR0_STRING] Color 0 usually assigned to an Object state
    GOLScheme_[SCHEME_NAME].Color1 = [COLOR1]; // [COLOR1_STRING] Color 1 usually assigned to an Object state
    GOLScheme_[SCHEME_NAME].ColorDisabled = [COLORDISABLED]; // [COLORDISABLED_STRING] Color used when an Object is in a disabled state
    GOLScheme_[SCHEME_NAME].CommonBkColor = [COMMONBKCOLOR]; // [COMMONBKCOLOR_STRING] Background color used to hide Objects
    GOLScheme_[SCHEME_NAME].EmbossDkColor = [EMBOSSDKCOLOR]; // [EMBOSSDKCOLOR_STRING] Emboss dark color used for 3d effect
    GOLScheme_[SCHEME_NAME].EmbossLtColor = [EMBOSSLTCOLOR]; // [EMBOSSLTCOLOR_STRING] Emboss light color used for 3d effect
    GOLScheme_[SCHEME_NAME].TextColor0 = [TEXTCOLOR0]; // [TEXTCOLOR0_STRING] Character color 0 used for objects that supports text
    GOLScheme_[SCHEME_NAME].TextColor1 = [TEXTCOLOR1]; // [TEXTCOLOR1_STRING] Character color 1 used for objects that supports text
    GOLScheme_[SCHEME_NAME].TextColorDisabled = [TEXTCOLORDISABLED]; // [TEXTCOLORDISABLED_STRING] Character color used when object is in a disabled state
    GOLScheme_[SCHEME_NAME].pFont = (void*)&[FONT_NAME]; // Font for the scheme
    GOLScheme_[SCHEME_NAME].fillStyle = [FILLSTYLE]; // fill style

    GOLScheme_[SCHEME_NAME].CommonBkLeft = [COMMONBKLEFT]; // Horizontal starting position of the background
    GOLScheme_[SCHEME_NAME].CommonBkTop = [COMMONBKTOP]; // Vertical starting position of the background
    GOLScheme_[SCHEME_NAME].CommonBkType = [COMMONBKTYPE]; // Background type 

    GOLScheme_[SCHEME_NAME].pCommonBkImage = [COMMONBKIMAGE]; // pointer to the background image used

    #ifndef GFX_CONFIG_ALPHABLEND_DISABLE
        GOLScheme_[SCHEME_NAME].AlphaValue = [ALPHAVALUE];
    #endif

    #ifndef GFX_CONFIG_GRADIENT_DISABLE
        #ifndef GFX_CONFIG_PALETTE_DISABLE
            #error "Gradient feature is not currently supported when palette is enabled. Declare the macro GFX_CONFIG_PALETTE_DISABLE to disable the palette mode"
        #endif
        GOLScheme_[SCHEME_NAME].gradientStartColor=[GRADIENTSTARTCOLOR]; // [GRADIENTSTARTCOLOR_STRING]
        GOLScheme_[SCHEME_NAME].gradientEndColor=[GRADIENTENDCOLOR]; // [GRADIENTENDCOLOR_STRING]
    #endif
    GOLScheme_[SCHEME_NAME].EmbossSize=[EMBOSS_SIZE];
}
]]>
            </Code>
        </CreateSchemes>
        <EventHandling>
            <MsgCallBack>
                <Header>
                    <![CDATA[
int16_t VGDD_[PROJECT_CLEAN_NAME]_MsgCallback(int16_t objMsg, GFX_GOL_OBJ_HEADER *pObj, GFX_GOL_MESSAGE *pMsg);
]]>
                </Header>
                <CodeHead>
                    <![CDATA[
#include "[PROJECTFILENAME_HELPERH]"
]]>                </CodeHead>
                <Code>
                    <Head>
                        <![CDATA[
// ------------------------------------------------------------------------------------------------------------
// VGDD Automatic Event Handling - Events messages routine
// ------------------------------------------------------------------------------------------------------------
// The VGDD_[PROJECT_CLEAN_NAME]_MsgCallback function will take care of handling events generated by your widgets
// and will execute the code you specified in Event Editor for each widget. In order for it to compile and work,
// you have to manually put every needed variable and constant definition into the [PROJECTFILENAME_HELPERH]
// header file, obviously only the first time.
[EMPTYLINE]
// To obtain Automatic Event Handling, you will also have to insert a call to VGDD_[PROJECT_CLEAN_NAME]_MsgCallback
// into your main "standard" GOLMsgCallback function (see Microchip's demos) passing all three parameters:
// return(VGDD_[PROJECT_CLEAN_NAME]_MsgCallback(objMsg, pObj, pMsg));
[EMPTYLINE]
int16_t VGDD_[PROJECT_CLEAN_NAME]_MsgCallback(int16_t objMsg, GFX_GOL_OBJ_HEADER *pObj, GFX_GOL_MESSAGE *pMsg) {
int16_t objId;
objId = GFX_GOL_ObjectIDGet(pObj);
switch (screenState) {
]]>
                    </Head>
                    <ScreenHead>
                        <![CDATA[
        case DISPLAY_[SCREEN_UPPERNAME]:
	        switch (objId) {
]]>
                    </ScreenHead>
                    <ControlHead>
                        <![CDATA[

                case ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]:
]]>
                    </ControlHead>
                    <Event>
                        <![CDATA[
                    if (objMsg == [EVENTMSG]) {
                        [CONTROLEVENTCODE]
                    }
]]>
                    </Event>
                    <ControlFoot>
                        <![CDATA[
                    break;
]]>
                    </ControlFoot>
                    <ScreenFoot>
                        <![CDATA[
                default:
                    break;
            } // End switch (objId) for DISPLAY_[SCREEN_UPPERNAME]
            break;
]]>
                    </ScreenFoot>
                    <NormalScreensFoot>
                        <![CDATA[
        default:
	        break;
    } // End switch (screenState)
]]>
                    </NormalScreensFoot>
                    <MasterScreenHead>
                        <![CDATA[
    switch (objId) { // MasterScreens
]]>
                    </MasterScreenHead>
                    <MasterScreenFoot>
                        <![CDATA[
    } // End switch (objId) for MasterScreens
]]>
                    </MasterScreenFoot>
                    <Foot>
                        <![CDATA[
    return (1);
} // End VGDD_[PROJECT_CLEAN_NAME]_MsgCallback
]]>
                    </Foot>
                </Code>
            </MsgCallBack>
            <DrawCallBack>
                <Header>
                    <![CDATA[
int16_t VGDD_[PROJECT_CLEAN_NAME]_DrawCallback(void);
]]>
                </Header>
                <CodeHead>
                </CodeHead>
                <Code>
                    <Head>
                        <![CDATA[
// ------------------------------------------------------------------------------------------------------------
// VGDD Automatic Event Handling - Draw Callback routine
// ------------------------------------------------------------------------------------------------------------
// The VGDD_[PROJECT_CLEAN_NAME]_DrawCallback function will take care of calling the CreateXXX() subroutines in order
// to draw widgets defined in the screen, according to the current screenState variable.
// In order for it to work, you have to insert a call to VGDD_[PROJECT_CLEAN_NAME]_DrawCallback into your main
// "standard" GOLDrawCallback function (see Microchip's demos) with no parameters:
// return(VGDD_[PROJECT_CLEAN_NAME]_DrawCallback());

int16_t VGDD_[PROJECT_CLEAN_NAME]_DrawCallback(void) {
	switch (screenState) {
]]>
                    </Head>
                    <ScreenHead>
                        <![CDATA[
        case CREATE_[SCREEN_UPPERNAME]: {
	        [SCREEN_BEFORE_CREATE]
	        Create[SCREEN_NAME]();
	        [SCREEN_AFTER_CREATE]
	        screenState = UPDATE_[SCREEN_UPPERNAME];
	        break;
        }
        case UPDATE_[SCREEN_UPPERNAME]: {
	        [SCREEN_UPDATE_CODE]
	        screenState = DISPLAY_[SCREEN_UPPERNAME];
	        break;
        }
        case DISPLAY_[SCREEN_UPPERNAME]: {
	        [SCREEN_DISPLAY_CODE]
	        break;
        }
]]>
                    </ScreenHead>
                    <Foot>
                        <![CDATA[
    default:
	    break;
    } // End switch (screenState)
    return (1);
} // End VGDD_[PROJECT_CLEAN_NAME]_DrawCallback
]]>
                    </Foot>
                </Code>
            </DrawCallBack>
        </EventHandling>
        <ResourceAllocation>
            Module           HeapPIC24  HeapPIC32   HeapItem   RAMPIC24   RAMPIC32   ROMPIC24   ROMPIC32
            PrimitivesLayer          0          0          0         68         53       3375       8868
            GOL                     20         24          0         32         28       2076       5400
            Button                  28         44          0          8         12       1002       2748
            Chart                   48         76          0         94        104      11427      26364
            CheckBox                22         36          0          2          4        894       2320
            RoundDial               30         40          0          8         12       1065       3228
            DigitalMeter            28         56          0          2          4       1125       2202
            EditBox                 26         40          0          2          4        822       2332
            GroupBox                24         36          0          8         12        903       2164
            ListBox                 28         44         12          6         12       1809       2580
            Meter                   52         68          0         36         40       2778       6788
            Picture                 22         36          0         10         12        645       1512
            ProgressBar             24         36          0         12         16       1050       2452
            RadioButton             26         44          0         14         20        993       2632
            Slider                  32         44          0         20         24       2094       5720
            StaticText              22         36          0          8         12        747       1884
            TextEntry               34         52         24         22         28       2484       6376
            Window                  24         40          0          2          4        804       1996

            SuperGauge             108        120          0         28         28       7896      11492
            Indicator               34         48          0         10         12       1076       2832
            Disp7Seg                40         56          0          6          6        768       1956
            VuMeter                 74         88          0          0          0       2732       6820
            BarGraph                64         78          0          0          0       2226       5276
            MsgBox                  54         82          0         14         14       2844       7668
            TextEntryEx              0          0          0          0          0          0      10624
            StaticTextEx            22         36          0          8         12        747       1884
        </ResourceAllocation>
        <CodeGenStart>
            <!--<ExcludeAllFilesInFolder Folder="Source Files/framework/gfx" />
            <ExcludeAllFilesInFolder Folder="Header Files/framework/gfx" />-->
        </CodeGenStart>
        <GOLFree>
            <![CDATA[
    GFX_GOL_ObjectListFree();
]]>
        </GOLFree>
        <SetPalette>
            <![CDATA[
    // set the palette color depth and initialize the palette used
    GFX_PaletteSet((void*)&[PALETTE], 0, [PALETTE].resource.palette.numberOfEntries);
]]>
        </SetPalette>
    </ProjectTemplates>
    <ScreenTemplates>
        <Create>
            <Header>
                <![CDATA[
void Create[SCREEN_NAME](void);
]]>
            </Header>
            <CodeHead>
            </CodeHead>
            <Code>
                <Normal>
                    <![CDATA[
void Create[SCREEN_NAME](void) {
    [GOLFREE]
    [SETPALETTE]
    GFX_ColorSet([SCREEN_BACKCOLOR]); // [SCREEN_BACKCOLOR_STRING]
    GFX_ScreenClear();
    #ifndef GFX_CONFIG_TRANSPARENT_COLOR_DISABLE
        GFX_TransparentColorEnable([TRANSPARENT_COLOUR]); // [TRANSPARENT_COLOUR_STRING]
    #endif
]]>
                </Normal>
                <Overlay>
                    <![CDATA[
void Create[SCREEN_NAME](void) {
    [GOLFREE]
    [SETPALETTE]
    #ifndef GFX_CONFIG_TRANSPARENT_COLOR_DISABLE
        GFX_TransparentColorEnable([TRANSPARENT_COLOUR]); // [TRANSPARENT_COLOUR_STRING]
    #endif
]]>
                </Overlay>
                <MasterScreen>
                    <![CDATA[
void Create[SCREEN_NAME](void) {
]]>
                </MasterScreen>
                <NormalWithMasterScreen>
                    <![CDATA[
void Create[SCREEN_NAME](void) {
    [GOLFREE]
    [SETPALETTE]
    GFX_ColorSet([SCREEN_BACKCOLOR]); // [SCREEN_BACKCOLOR_STRING]
    GFX_ScreenClear();
    #ifndef GFX_CONFIG_TRANSPARENT_COLOR_DISABLE
        GFX_TransparentColorEnable([TRANSPARENT_COLOUR]); // [TRANSPARENT_COLOUR_STRING]
    #endif
    [CREATE_MASTERSCREENS]
]]>
                </NormalWithMasterScreen>
                <CreateMasterScreens>
                    <![CDATA[
    Create[MASTERSCREEN_NAME]();
]]>
                </CreateMasterScreens>
            </Code>
        </Create>
        <CreateSchemes>
            <Code>
                <![CDATA[
    CreateScheme_[SCHEME_NAME]();
]]>
            </Code>
        </CreateSchemes>
        <ClosingBlock>
            <Header>
            </Header>
            <Code>
                <![CDATA[
} // End of Create[SCREEN_NAME]
[EMPTYLINE]
]]>
            </Code>
        </ClosingBlock>
    </ScreenTemplates>
    <ControlsTemplates>
        <Screen>
            <Code>
                <Section Name="MainHeader">
                    <![CDATA[
//#include "VGDD_[PROJECT_NAME]_Screens.h"
]]>
                </Section>
            </Code>
            <Events>
                <Event Name="SCREEN_BEFORE_CREATE" Description="Executes before screen creation" PlayerEvent="MOUSE_DOWN" />
                <Event Name="SCREEN_AFTER_CREATE" Description="Executes before screen is displayed" PlayerEvent="MOUSE_DOWN" />
                <Event Name="SCREEN_UPDATE" Description="Executes when screenState is set to UPDATE by code" PlayerEvent="MOUSE_DOWN" />
                <Event Name="SCREEN_DISPLAY" Description="Executes continuously while screen is displayed. Use this to do timed actions in code." PlayerEvent="MOUSE_DOWN" />
            </Events>
            <Actions>
                <Action Name="Go to Screen" Code="screenState=CREATE_[SCREEN_UPPERNAME];[NEWLINE]" />
                <!--<Action Name="Timed Action" Code="// Use this version only when TCP/IP stack is added to the project[NEWLINE]static int32_t Tick_[SCREEN_NAME];[NEWLINE]if (TickGet() - Tick_[SCREEN_NAME] > TICK_SECOND * 2) {[NEWLINE]    Tick_[SCREEN_NAME] = TickGet();[NEWLINE]    // Do something[NEWLINE]}" />-->
                <Action Name="Timed Action" Code="static int32_t Tick_[SCREEN_NAME];[NEWLINE]if (tick - Tick_[SCREEN_NAME] > 100) {[NEWLINE]    Tick_[SCREEN_NAME] = tick;[NEWLINE]    // Do something[NEWLINE]}" />
                <Action Name="Turn Display Off" Code="DisplayBacklightOff();" />
                <Action Name="Turn Display On" Code="DisplayBacklightOn();" />
            </Actions>
        </Screen>
        <Button>
            <GOL>Yes</GOL>
            <Project>
                <Folder Name="Header Files/framework/gfx">
                    <AddFile>$MAL/framework/gfx/gfx_gol_button.h</AddFile>
                </Folder>
                <Folder Name="Source Files/framework/gfx">
                    <AddFile>$MAL/framework/gfx/src/gfx_gol_button.c</AddFile>
                    <AddFile>$MAL/framework/gfx/src/gfx_gol.c</AddFile>
                    <AddFile>$MAL/framework/gfx/src/gfx_primitive.c</AddFile>
                </Folder>
            </Project>
            <Header>
                <![CDATA[
#define ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]   [NEXT_NUMID]
]]>
            </Header>
            <Constructor>
                <![CDATA[
    GFX_GOL_BUTTON *p[CONTROLID];
]]>
            </Constructor>
            <Code>
                <![CDATA[
    [BITMAP_POINTER_INIT]
    p[CONTROLID] = GFX_GOL_ButtonCreate(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX],[LEFT],[TOP],[RIGHT],[BOTTOM],[RADIUS],[STATE],[PRESSEDBITMAP],[RELEASEDBITMAP],(GFX_XCHAR*)[WIDGETTEXT],[ALIGNMENT],(GFX_GOL_OBJ_SCHEME *)&GOLScheme_[SCHEME]);
]]>
            </Code>
            <State>
                <Enabled True="GFX_GOL_BUTTON_DRAW_STATE" False="GFX_GOL_BUTTON_DISABLED_STATE" />
                <Hidden False="GFX_GOL_BUTTON_DRAW_STATE" True="GFX_GOL_BUTTON_HIDE_STATE" />
                <Pressed True="GFX_GOL_BUTTON_PRESSED_STATE" False="GFX_GOL_BUTTON_DRAW_STATE" />
                <NoPanel True="GFX_GOL_BUTTON_NOPANEL_STATE" False="GFX_GOL_BUTTON_DRAW_STATE" />
                <TwoTone True="GFX_GOL_BUTTON_TWOTONE_STATE" False="GFX_GOL_BUTTON_DRAW_STATE" />
                <HasFocus True="GFX_GOL_BUTTON_FOCUSED_STATE" False="GFX_GOL_BUTTON_DRAW_STATE" />
                <Toggle True="GFX_GOL_BUTTON_TOGGLE_STATE" False="GFX_GOL_BUTTON_DRAW_STATE" />
            </State>
            <Alignment>
                <Horizontal Left="GFX_ALIGN_LEFT" Right="GFX_ALIGN_RIGHT" Center="GFX_ALIGN_HCENTER" />
                <Vertical Top="GFX_ALIGN_TOP" Bottom="GFX_ALIGN_BOTTOM" Center="GFX_ALIGN_VCENTER" />
                <!-- TODO: GFX_ALIGN_CENTER -->
            </Alignment>
            <Events>
                <Event Name="GFX_GOL_BUTTON_ACTION_PRESSED" LegacyName="BTN_MSG_PRESSED" Description="Button pressed" PlayerEvent="MOUSE_DOWN" />
                <Event Name="GFX_GOL_BUTTON_ACTION_STILLPRESSED" LegacyName="BTN_MSG_STILLPRESSED" Description="Button is continuously pressed" PlayerEvent="MOUSE_DOWN" />
                <Event Name="GFX_GOL_BUTTON_ACTION_RELEASED" LegacyName="BTN_MSG_RELEASED" Description="Button released" PlayerEvent="MOUSE_UP" />
                <Event Name="GFX_GOL_BUTTON_ACTION_CANCELPRESS" LegacyName="BTN_MSG_CANCELPRESS" Description="Button released with button press canceled" PlayerEvent="MOUSE_LEAVE" />
            </Events>
            <Actions>
                <Action Name="Use Widget ID" Code="ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]" />
                <Action Name="Set Button Text"
                                Code="GFX_GOL_ButtonTextSet((GFX_GOL_BUTTON*)GOLFindObject(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]), (GFX_XCHAR *) $Quoted string constant or variable:|&quot;New text&quot;$);[NEWLINE]"
                                Help="Sets the string used for the object."/>
                <Action Name="Get Button Text"
                                Code="GFX_XCHAR *pText;
	pText = GFX_GOL_ButtonTextGet((GFX_GOL_BUTTON*)GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]));[NEWLINE]"
                                Help="Returns pointer to the text string being used"/>
                <Action Name="Set Pressed Button Bitmap"
                                Code="GFX_GOL_ButtonPressStateImageSet((GFX_GOL_BUTTON*)GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]), (void *)&amp;%BITMAP%);[NEWLINE]"
                                Help="Sets the bitmap used for pressed state"/>
                <Action Name="Set Released Button Bitmap"
                                Code="GFX_GOL_ButtonReleaseStateImageSet((GFX_GOL_BUTTON*)GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]), (void *)&amp;%BITMAP%);[NEWLINE]"
                                Help="Sets the bitmap used for released state"/>
                <Action Name="Get Pressed Button Bitmap" Code="GFX_RESOURCE_HDR *pUsedBitmap;
	pUsedbitmap = GFX_GOL_ButtonPressStateImageGet((GFX_GOL_BUTTON*)GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]));[NEWLINE]"
                                Help="Returns the pointer to the current bitmap used for pressed state."/>
                <Action Name="Get Released Button Bitmap" Code="GFX_RESOURCE_HDR *pUsedBitmap;
	pUsedbitmap = GFX_GOL_ButtonReleaseStateImageGet((GFX_GOL_BUTTON*)GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]));[NEWLINE]"
                                Help="Returns the pointer to the current bitmap used for released state."/>
                <Action Name="Hide Button" Code="GFX_GOL_ObjectStateSet(GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]), GFX_GOL_BUTTON_HIDE_STATE);[NEWLINE]" />
                <Action Name="Disable Button" Code="GFX_GOL_ObjectStateSet(GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]), GFX_GOL_BUTTON_DISABLED_STATE);[NEWLINE]" />
                <Action Name="Enable Button" Code="GFX_GOL_ObjectStateClear(GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]), GFX_GOL_BUTTON_DISABLED_STATE);[NEWLINE]" />
                <Action Name="Show/Update Button" Code="GFX_GOL_ObjectStateSet(GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]), GFX_GOL_BUTTON_DRAW_STATE);[NEWLINE]" />
                <Action Name="Use Text Buffer name" Code="[CONTROLID_NOINDEX][CONTROLID_INDEX]_Text" />
                <Action Name="=== Using pointer ===" Code="" />
                <Action Name="Create pointer var (mandatory)" Code="GFX_GOL_BUTTON *pbtn[CONTROLID_NOINDEX][CONTROLID_INDEX]=(GFX_GOL_BUTTON *)GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]);[NEWLINE]" />
                <Action Name="Set Button Text(2)"
                                Code="GFX_GOL_ButtonTextSet(pbtn[CONTROLID_NOINDEX][CONTROLID_INDEX], (GFX_XCHAR *) $Quoted string constant or variable:|&quot;New text&quot;$);[NEWLINE]"
                                Help="Sets the string that will be used for the object"/>
                <Action Name="Get Button Text(2)"
                                Code="GFX_XCHAR *pText=GFX_GOL_ButtonTextGet(pbtn[CONTROLID_NOINDEX][CONTROLID_INDEX]);[NEWLINE]"
                                Help="Returns the pointer to the text string used"/>
                <Action Name="Set Pressed Button Bitmap(2)"
                                Code="GFX_GOL_ButtonPressStateImageSet(pbtn[CONTROLID_NOINDEX][CONTROLID_INDEX], (void *)&amp;%BITMAP%);[NEWLINE]"
                                Help="Sets the bitmap used for pressed state"/>
                <Action Name="Set Released Button Bitmap(2)"
                                Code="GFX_GOL_ButtonReleaseStateImageSet(pbtn[CONTROLID_NOINDEX][CONTROLID_INDEX], (void *)&amp;%BITMAP%);[NEWLINE]"
                                Help="Sets the bitmap used for released state"/>
                <Action Name="Get Pressed Button Bitmap(2)" Code="GFX_RESOURCE_HDR *pUsedBitmap = GFX_GOL_ButtonPressStateImageGet(pbtn[CONTROLID_NOINDEX][CONTROLID_INDEX]);[NEWLINE]"
                                Help="Returns the pointer to the current bitmap used for pressed state."/>
                <Action Name="Get Released Button Bitmap(2)" Code="GFX_RESOURCE_HDR *pUsedBitmap = GFX_GOL_ButtonReleaseStateImageGet(pbtn[CONTROLID_NOINDEX][CONTROLID_INDEX]);[NEWLINE]"
                                Help="Returns the pointer to the current bitmap used for pressed state."/>
                <Action Name="Hide Button(2)" Code="GFX_GOL_ObjectStateSet(pbtn[CONTROLID_NOINDEX][CONTROLID_INDEX], GFX_GOL_BUTTON_HIDE_STATE);[NEWLINE]" />
                <Action Name="Disable Button(2)" Code="GFX_GOL_ObjectStateSet(pbtn[CONTROLID_NOINDEX][CONTROLID_INDEX], GFX_GOL_BUTTON_DISABLED_STATE);[NEWLINE]" />
                <Action Name="Enable Button(2)" Code="GFX_GOL_ObjectStateClear(pbtn[CONTROLID_NOINDEX][CONTROLID_INDEX], GFX_GOL_BUTTON_DISABLED_STATE);[NEWLINE]" />
                <Action Name="Show/Update Button(2)" Code="GFX_GOL_ObjectStateSet(pbtn[CONTROLID_NOINDEX][CONTROLID_INDEX], GFX_GOL_BUTTON_DRAW_STATE);[NEWLINE]" />
            </Actions>
        </Button>
        <StaticText>
            <GOL>Yes</GOL>
            <Project>
                <Folder Name="Header Files/framework/gfx">
                    <AddFile>$MAL/framework/gfx/gfx_gol_static_text.h</AddFile>
                </Folder>
                <Folder Name="Source Files/framework/gfx">
                    <AddFile>$MAL/framework/gfx/src/gfx_gol_static_text.c</AddFile>
                    <AddFile>$MAL/framework/gfx/src/gfx_gol.c</AddFile>
                    <AddFile>$MAL/framework/gfx/src/gfx_primitive.c</AddFile>
                </Folder>
            </Project>
            <Header>
                <![CDATA[
#define ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]   [NEXT_NUMID]
]]>
            </Header>
            <Constructor>
                <![CDATA[
    GFX_GOL_STATICTEXT *p[CONTROLID_NOINDEX][CONTROLID_INDEX];
]]>
            </Constructor>
            <Code>
                <![CDATA[
    p[CONTROLID_NOINDEX][CONTROLID_INDEX] = GFX_GOL_StaticTextCreate(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX],[LEFT],[TOP],[RIGHT],[BOTTOM],[STATE],(GFX_XCHAR*)[WIDGETTEXT],[ALIGNMENT],(GFX_GOL_OBJ_SCHEME *)&GOLScheme_[SCHEME]);
]]>
            </Code>
            <State>
                <Enabled True="GFX_GOL_STATICTEXT_DRAW_STATE" False="GFX_GOL_STATICTEXT_DRAW_STATE|GFX_GOL_STATICTEXT_DISABLED_STATE" />
                <Hidden False="GFX_GOL_STATICTEXT_DRAW_STATE" True="GFX_GOL_STATICTEXT_HIDE_STATE" />
                <Frame Enabled="GFX_GOL_STATICTEXT_FRAME_STATE" Disabled="GFX_GOL_STATICTEXT_DRAW_STATE" />
            </State>
            <Alignment>
                <Horizontal Left="GFX_ALIGN_LEFT" Right="GFX_ALIGN_RIGHT" Center="GFX_ALIGN_HCENTER" />
                <Vertical Top="GFX_ALIGN_TOP" Bottom="GFX_ALIGN_BOTTOM" Center="GFX_ALIGN_VCENTER" />
                <!-- TODO: GFX_ALIGN_CENTER -->
            </Alignment>
            <Events>
                <Event Name="GFX_GOL_STATICTEXT_ACTION_SELECTED" LegacyName="ST_MSG_SELECTED" Description="Static Text selected" PlayerEvent="MOUSE_DOWN" />
            </Events>
            <Actions>
                <Action Name="Use Widget ID" Code="ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]" />
                <Action Name="Set StaticText Text"
                                Code="GFX_GOL_StaticTextSet((GFX_GOL_STATICTEXT *)GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]), (GFX_XCHAR *) $Quoted string constant or variable:|&quot;New text&quot;$);[NEWLINE]"
                                Help="Sets the string that will be used for the object"/>
                <Action Name="Get StaticText Text"
                                Code="GFX_XCHAR *pText;
	pText=((GFX_GOL_STATICTEXT *)(GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX])))->pText;[NEWLINE]"
                                Help="Returns the pointer to the text string used"/>
                <Action Name="Hide StaticText" Code="GFX_GOL_ObjectStateSet(GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]), GFX_GOL_STATICTEXT_HIDE_STATE);[NEWLINE]" />
                <Action Name="Disable StaticText" Code="GFX_GOL_ObjectStateSet(GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]), GFX_GOL_STATICTEXT_DISABLED_STATE);[NEWLINE]" />
                <Action Name="Enable StaticText" Code="GFX_GOL_ObjectStateClear(GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]), GFX_GOL_STATICTEXT_DISABLED_STATE);[NEWLINE]" />
                <Action Name="Show/Update StaticText" Code="GFX_GOL_ObjectStateSet(GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]), GFX_GOL_STATICTEXT_DRAW_STATE);[NEWLINE]" />
                <Action Name="Use Text Buffer name" Code="[CONTROLID_NOINDEX][CONTROLID_INDEX]_Text" />
                <Action Name="=== Using pointer ===" Code="" />
                <Action Name="Create pointer var (mandatory)" Code="GFX_GOL_STATICTEXT *pst[CONTROLID_NOINDEX][CONTROLID_INDEX]=(GFX_GOL_STATICTEXT *)GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]);[NEWLINE]" />
                <Action Name="Set StaticText Text(2)"
                                Code="GFX_GOL_StaticTextSet(pst[CONTROLID_NOINDEX][CONTROLID_INDEX], (GFX_XCHAR *) $Quoted string constant or variable:|&quot;New text&quot;$);[NEWLINE]"
                                Help="Sets the string that will be used for the object"/>
                <Action Name="Get StaticText Text(2)"
                                Code="GFX_XCHAR *pText=pst[CONTROLID_NOINDEX][CONTROLID_INDEX]->pText;[NEWLINE]"
                                Help="Returns the pointer to the text string used"/>
                <Action Name="Hide StaticText(2)" Code="GFX_GOL_ObjectStateSet(pst[CONTROLID_NOINDEX][CONTROLID_INDEX], GFX_GOL_STATICTEXT_HIDE_STATE);[NEWLINE]" />
                <Action Name="Disable StaticText(2)" Code="GFX_GOL_ObjectStateSet(pst[CONTROLID_NOINDEX][CONTROLID_INDEX], GFX_GOL_STATICTEXT_DISABLED_STATE);[NEWLINE]" />
                <Action Name="Enable StaticText(2)" Code="GFX_GOL_ObjectStateClear(pst[CONTROLID_NOINDEX][CONTROLID_INDEX], GFX_GOL_STATICTEXT_DISABLED_STATE);[NEWLINE]" />
                <Action Name="Show/Update StaticText(2)" Code="GFX_GOL_ObjectStateSet(pst[CONTROLID_NOINDEX][CONTROLID_INDEX], GFX_GOL_STATICTEXT_DRAW_STATE);[NEWLINE]" />
            </Actions>
        </StaticText>
        <CheckBox>
            <GOL>Yes</GOL>
            <Project>
                <Folder Name="Header Files/framework/gfx">
                    <AddFile>$MAL/framework/gfx/gfx_gol_check_box.h</AddFile>
                </Folder>
                <Folder Name="Source Files/framework/gfx">
                    <AddFile>$MAL/framework/gfx/src/gfx_gol_check_box.c</AddFile>
                    <AddFile>$MAL/framework/gfx/src/gfx_gol.c</AddFile>
                    <AddFile>$MAL/framework/gfx/src/gfx_primitive.c</AddFile>
                </Folder>
            </Project>
            <Header>
                <![CDATA[
#define ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]   [NEXT_NUMID]
]]>
            </Header>
            <Constructor>
                <![CDATA[
GFX_GOL_CHECKBOX *p[CONTROLID];
]]>
            </Constructor>
            <Code>
                <![CDATA[
p[CONTROLID] = GFX_GOL_CheckBoxCreate(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX],[LEFT],[TOP],[RIGHT],[BOTTOM],[STATE],(GFX_XCHAR*)[WIDGETTEXT],[ALIGNMENT],(GFX_GOL_OBJ_SCHEME *)&GOLScheme_[SCHEME]);
]]>
            </Code>
            <State>
                <Enabled True="GFX_GOL_CHECKBOX_DRAW_STATE" False="GFX_GOL_CHECKBOX_DRAW_STATE|GFX_GOL_CHECKBOX_DISABLED_STATE" />
                <Hidden False="GFX_GOL_CHECKBOX_DRAW_STATE" True="GFX_GOL_CHECKBOX_HIDE_STATE" />
                <Checked True="GFX_GOL_CHECKBOX_DRAW_CHECK_STATE" False="GFX_GOL_CHECKBOX_DRAW_STATE" />
            </State>
            <Alignment>
                <Horizontal Left="GFX_ALIGN_LEFT" Right="GFX_ALIGN_RIGHT" Center="GFX_ALIGN_HCENTER" />
                <Vertical Top="GFX_ALIGN_TOP" Bottom="GFX_ALIGN_BOTTOM" Center="GFX_ALIGN_VCENTER" />
                <!-- TODO: GFX_ALIGN_CENTER -->
            </Alignment>
            <Events>
                <Event Name="GFX_GOL_CHECKBOX_ACTION_CHECKED" LegacyName="CB_MSG_CHECKED" Description="CheckBox checked" PlayerEvent="CHECKED" />
                <Event Name="GFX_GOL_CHECKBOX_ACTION_UNCHECKED" LegacyName="CB_MSG_UNCHECKED" Description="CheckBox un-checked" PlayerEvent="UNCHECKED" />
            </Events>
            <Actions>
                <Action Name="Use Widget ID" Code="ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]" />
                <Action Name="Set CheckBox Text"
                                Code="GFX_GOL_CheckBoxTextSet((GFX_GOL_CHECKBOX *)GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]), (GFX_XCHAR *) $Quoted string constant or variable:|&quot;New text&quot;$);[NEWLINE]"
                                Help="This function sets the text that will be used"/>
                <Action Name="Get CheckBox Text" Code="GFX_XCHAR *pText;
	pText=GFX_GOL_CheckBoxTextGet((GFX_GOL_CHECKBOX *)GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]));[NEWLINE]"
                                Help="Returns the location of the text used for the check box"/>
                <Action Name="Set CheckBox State to ON (checked)" Code="GFX_GOL_ObjectStateSet(GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]), GFX_GOL_CHECKBOX_DRAW_CHECK_STATE | GFX_GOL_CHECKBOX_DRAW_STATE_CHECK);[NEWLINE]" />
                <Action Name="Set CheckBox State to OFF (unchecked)" Code="GFX_GOL_ObjectStateClear(GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]), GFX_GOL_CHECKBOX_DRAW_CHECK_STATE);[NEWLINE]GFX_GOL_ObjectStateSet(GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]), GFX_GOL_CHECKBOX_DRAW_STATE_CHECK);[NEWLINE]" />
                <Action Name="Hide CheckBox" Code="GFX_GOL_ObjectStateSet(GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]), GFX_GOL_CHECKBOX_HIDE_STATE);[NEWLINE]" />
                <Action Name="Disable CheckBox" Code="GFX_GOL_ObjectStateSet(GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]), GFX_GOL_CHECKBOX_DISABLED_STATE);[NEWLINE]" />
                <Action Name="Enable CheckBox" Code="GFX_GOL_ObjectStateClear(GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]), GFX_GOL_CHECKBOX_DISABLED_STATE);[NEWLINE]" />
                <Action Name="Show/Update CheckBox" Code="GFX_GOL_ObjectStateSet(GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]), GFX_GOL_CHECKBOX_DRAW_STATE);[NEWLINE]" />
                <Action Name="Use Text Buffer name" Code="[CONTROLID_NOINDEX][CONTROLID_INDEX]_Text" />
            </Actions>
        </CheckBox>
        <EditBox>
            <GOL>Yes</GOL>
            <Project>
                <Folder Name="Header Files/framework/gfx">
                    <AddFile>$MAL/framework/gfx/gfx_gol_edit_box.h</AddFile>
                </Folder>
                <Folder Name="Source Files/framework/gfx">
                    <AddFile>$MAL/framework/gfx/src/gfx_gol_edit_box.c</AddFile>
                    <AddFile>$MAL/framework/gfx/src/gfx_gol.c</AddFile>
                    <AddFile>$MAL/framework/gfx/src/gfx_primitive.c</AddFile>
                </Folder>
            </Project>
            <Header>
                <![CDATA[
#define ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]   [NEXT_NUMID]
]]>
            </Header>
            <Constructor>
                <![CDATA[
GFX_GOL_EDITBOX *p[CONTROLID];
]]>
            </Constructor>
            <Code>
                <![CDATA[
    p[CONTROLID] = GFX_GOL_EditBoxCreate(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX],[LEFT],[TOP],[RIGHT],[BOTTOM],[STATE],(GFX_XCHAR*)[CONTROLID]_Text,[CHARMAX],[ALIGNMENT],(GFX_GOL_OBJ_SCHEME *)&GOLScheme_[SCHEME]);
]]>
            </Code>
            <State>
                <Enabled True="GFX_GOL_EDITBOX_DRAW_STATE" False="GFX_GOL_EDITBOX_DRAW_STATE|GFX_GOL_EDITBOX_DISABLED_STATE" />
                <Hidden False="GFX_GOL_EDITBOX_DRAW_STATE" True="GFX_GOL_EDITBOX_HIDE_STATE" />
                <Caret True="GFX_GOL_EDITBOX_DRAW_CARET_STATE" False="GFX_GOL_EDITBOX_DRAW_STATE" />
            </State>
            <Alignment>
                <Horizontal Left="GFX_ALIGN_LEFT" Right="GFX_ALIGN_RIGHT" Center="GFX_ALIGN_HCENTER" />
                <Vertical Top="GFX_ALIGN_TOP" Bottom="GFX_ALIGN_BOTTOM" Center="GFX_ALIGN_VCENTER" />
                <!-- TODO: GFX_ALIGN_CENTER -->
            </Alignment>
            <Events>
                <Event Name="GFX_GOL_EDITBOX_ACTION_ADD_CHAR" LegacyName="EB_MSG_CHAR" Description="EditBox character inserted" />
                <Event Name="GFX_GOL_EDITBOX_ACTION_DEL_CHAR" LegacyName="EB_MSG_DEL" Description="EditBox character removed" />
                <Event Name="GFX_GOL_EDITBOX_ACTION_TOUCHSCREEN" LegacyName="EB_MSG_TOUCHSCREEN" Description="EditBox touched" PlayerEvent="MOUSE_DOWN" />
            </Events>
            <Actions>
                <Action Name="Use Widget ID" Code="ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]" />
                <Action Name="Use Text Buffer name" Code="[CONTROLID]_Text" />
                <Action Name="Set EditBox Text"
                                Code="GFX_GOL_EditBoxTextSet((GFX_GOL_EDITBOX *)GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]), (GFX_XCHAR *) $Quoted string constant or variable:|&quot;New text&quot;$);[NEWLINE]"
                                Help="Sets the text to be used for the object"/>
                <Action Name="Add a character at the end"
                                Code="GFX_GOL_EditBoxCharAdd((GFX_GOL_EDITBOX *)GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]), (GFX_XCHAR) $Quoted char constant or variable:|'c'$);[NEWLINE]"
                                Help="Inserts a character at the end of the text used by the object"/>
                <Action Name="Delete last character"
                                Code="GFX_GOL_EditBoxCharRemove((GFX_GOL_EDITBOX *)GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]));[NEWLINE]"
                                Help="Removes a character at the end of the text used by the object"/>
                <Action Name="Hide EditBox" Code="GFX_GOL_ObjectStateSet(GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]), GFX_GOL_EDITBOX_HIDE_STATE);[NEWLINE]" />
                <Action Name="Disable EditBox" Code="GFX_GOL_ObjectStateSet(GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]), GFX_GOL_EDITBOX_DISABLED_STATE);[NEWLINE]" />
                <Action Name="Enable EditBox" Code="GFX_GOL_ObjectStateClear(GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]), GFX_GOL_EDITBOX_DISABLED_STATE);[NEWLINE]" />
                <Action Name="Show/Update EditBox" Code="GFX_GOL_ObjectStateSet(GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]), GFX_GOL_EDITBOX_DRAW_STATE);[NEWLINE]" />
                <Action Name="Edit text using EditNumUpDown" Code="if (pMsg->uiEvent == EVENT_RELEASE) {
								EditNumIdActive = ID_[CONTROLID_NOINDEX][CONTROLID_INDEX];
								EditNumPun = (GFX_XCHAR *) &amp;[CONTROLID]_Text;
								EditTextMode = NUMERICUPDOWN;
								EditNumMin=0;
								EditNumMax=255;
								prevState = screenState;
								screenState = CREATE_EDITNUM;
							}" />
            </Actions>
        </EditBox>
        <RadioButton>
            <GOL>Yes</GOL>
            <Project>
                <Folder Name="Header Files/framework/gfx">
                    <AddFile>$MAL/framework/gfx/gfx_gol_radio_button.h</AddFile>
                </Folder>
                <Folder Name="Source Files/framework/gfx">
                    <AddFile>$MAL/framework/gfx/src/gfx_gol_radio_button.c</AddFile>
                    <AddFile>$MAL/framework/gfx/src/gfx_gol.c</AddFile>
                    <AddFile>$MAL/framework/gfx/src/gfx_primitive.c</AddFile>
                </Folder>
            </Project>
            <Header>
                <![CDATA[
#define ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]   [NEXT_NUMID]
]]>
            </Header>
            <Constructor>
                <![CDATA[
GFX_GOL_RADIOBUTTON *p[CONTROLID];
]]>
            </Constructor>
            <Code>
                <![CDATA[
    p[CONTROLID] = GFX_GOL_RadioButtonCreate(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX],[LEFT],[TOP],[RIGHT],[BOTTOM],[STATE],(GFX_XCHAR*)[WIDGETTEXT],[ALIGNMENT],(GFX_GOL_OBJ_SCHEME *)&GOLScheme_[SCHEME]);
]]>
            </Code>
            <State>
                <Enabled True="GFX_GOL_RADIOBUTTON_DRAW_STATE" False="GFX_GOL_RADIOBUTTON_DRAW_STATE|GFX_GOL_RADIOBUTTON_DISABLED_STATE" />
                <Hidden False="GFX_GOL_RADIOBUTTON_DRAW_STATE" True="GFX_GOL_RADIOBUTTON_HIDE_STATE" />
                <Checked True="GFX_GOL_RADIOBUTTON_CHECKED_STATE" False="GFX_GOL_RADIOBUTTON_DRAW_STATE" />
                <FirstInGroup True="GFX_GOL_RADIOBUTTON_GROUP_STATE" False="GFX_GOL_RADIOBUTTON_DRAW_STATE" />
            </State>
            <Alignment>
                <Horizontal Left="GFX_ALIGN_LEFT" Right="GFX_ALIGN_RIGHT" Center="GFX_ALIGN_HCENTER" />
                <Vertical Top="GFX_ALIGN_TOP" Bottom="GFX_ALIGN_BOTTOM" Center="GFX_ALIGN_VCENTER" />
                <!-- TODO: GFX_ALIGN_CENTER -->
            </Alignment>
            <Events>
                <Event Name="GFX_GOL_RADIOBUTTON_ACTION_CHECKED" LegacyName="RB_MSG_CHECKED" Description="RadioButton checked" PlayerEvent="CHECKEDCHANGE" />
            </Events>
            <Actions>
                <Action Name="Use Widget ID" Code="ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]" />
                <Action Name="Set RadioButton Text"
                                Code="GFX_GOL_RadioButtonTextSet((GFX_GOL_RADIOBUTTON *)GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]), (GFX_XCHAR *) $Quoted string constant or variable:|&quot;New text&quot;$);[NEWLINE]"
                                Help="Sets the string used for the object"/>
                <Action Name="Get RadioButton Text"
                                Code="GFX_XCHAR *pText;
							pText=GFX_GOL_RadioButtonTextGet((GFX_GOL_RADIOBUTTON *)GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]));[NEWLINE]"
                                Help="Returns pointer to the text string being used"/>
                <Action Name="Set RadioButton State to ON (checked)"
                                Code="GFX_GOL_RadioButtonCheckSet((GFX_GOL_RADIOBUTTON *)GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]),ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]);[NEWLINE]"
                                Help="This function sets the Radio Button to its checked state."/>
                <Action Name="Hide RadioButton" Code="GFX_GOL_ObjectStateSet(GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]), GFX_GOL_RADIOBUTTON_HIDE_STATE);[NEWLINE]" />
                <Action Name="Disable RadioButton" Code="GFX_GOL_ObjectStateSet(GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]), GFX_GOL_RADIOBUTTON_DISABLED_STATE);[NEWLINE]" />
                <Action Name="Enable RadioButton" Code="GFX_GOL_ObjectStateClear(GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]), GFX_GOL_RADIOBUTTON_DISABLED_STATE);[NEWLINE]" />
                <Action Name="Show/Update RadioButton" Code="GFX_GOL_ObjectStateSet(GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]), GFX_GOL_RADIOBUTTON_DRAW_STATE);[NEWLINE]" />
                <Action Name="Get ID of the checked button in group"
                                Code="SHORT ID;
							ID=GFX_GOL_RadioButtonCheckGet((GFX_GOL_RADIOBUTTON *)GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX])"
                                Help="Returns the ID of the selected button in the group. It returns -1 if there is no object checked"/>
            </Actions>
        </RadioButton>
        <Window>
            <GOL>Yes</GOL>
            <Project>
                <Folder Name="Header Files/framework/gfx">
                    <AddFile>$MAL/framework/gfx/gfx_gol_window.h</AddFile>
                </Folder>
                <Folder Name="Source Files/framework/gfx">
                    <AddFile>$MAL/framework/gfx/src/gfx_gol_window.c</AddFile>
                    <AddFile>$MAL/framework/gfx/src/gfx_gol.c</AddFile>
                    <AddFile>$MAL/framework/gfx/src/gfx_primitive.c</AddFile>
                </Folder>
            </Project>
            <Header>
                <![CDATA[
#define ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]   [NEXT_NUMID]
]]>
            </Header>
            <Constructor>
                <![CDATA[
GFX_GOL_WINDOW *p[CONTROLID_NOINDEX][CONTROLID_INDEX];
]]>
            </Constructor>
            <Code>
                <![CDATA[
    [BITMAP_POINTER_INIT]
    p[CONTROLID_NOINDEX][CONTROLID_INDEX] = GFX_GOL_WindowCreate(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX],[LEFT],[TOP],[RIGHT],[BOTTOM],[STATE],[BITMAP],(GFX_XCHAR*)[WIDGETTEXT],[ALIGNMENT],(GFX_GOL_OBJ_SCHEME *)&GOLScheme_[SCHEME]);
]]>
            </Code>
            <State>
                <Enabled True="GFX_GOL_WINDOW_DRAW_STATE" False="GFX_GOL_WINDOW_DRAW_STATE|GFX_GOL_WINDOW_DISABLED_STATE" />
                <Hidden False="GFX_GOL_WINDOW_DRAW_STATE" True="GFX_GOL_WINDOW_HIDE_STATE" />
            </State>
            <Alignment>
                <Horizontal Left="GFX_ALIGN_LEFT" Right="GFX_ALIGN_RIGHT" Center="GFX_ALIGN_HCENTER" />
                <Vertical Top="GFX_ALIGN_TOP" Bottom="GFX_ALIGN_BOTTOM" Center="GFX_ALIGN_VCENTER" />
                <!-- TODO: GFX_ALIGN_CENTER -->
            </Alignment>
            <Events>
                <Event Name="GFX_GOL_WINDOW_ACTION_CLIENT" LegacyName="WND_MSG_CLIENT" Description="Window client area selected" />
                <Event Name="GFX_GOL_WINDOW_ACTION_TITLE" LegacyName="WND_MSG_TITLE" Description="Window title bar selected" PlayerEvent="MOUSE_DOWN" />
            </Events>
            <Actions>
                <Action Name="Use Widget ID" Code="ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]" />
                <Action Name="Set Window Text"
                                Code="GFX_GOL_WindowTextSet((GFX_GOL_WINDOW *)GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]), (GFX_XCHAR *) $Quoted string constant or variable:|&quot;New text&quot;$);[NEWLINE]"
                                Help="Sets the string used for the title bar"/>
                <Action Name="Get Window Text"
                                Code="XCAR *pText;
							pText=GFX_GOL_WindowTextGet((GFX_GOL_WINDOW *)GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]));[NEWLINE]"
                                Help="Returns the address of the current text string used for the title bar"/>
                <Action Name="Hide Window" Code="GFX_GOL_ObjectStateSet(GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]), GFX_GOL_WINDOW_HIDE_STATE);[NEWLINE]" />
                <Action Name="Show/Update Window" Code="GFX_GOL_ObjectStateSet(GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]), GFX_GOL_WINDOW_DRAW_STATE);[NEWLINE]" />
            </Actions>
        </Window>
        <GroupBox>
            <GOL>Yes</GOL>
            <Project>
                <Folder Name="Header Files/framework/gfx">
                    <AddFile>$MAL/framework/gfx/gfx_gol_group_box.h</AddFile>
                </Folder>
                <Folder Name="Source Files/framework/gfx">
                    <AddFile>$MAL/framework/gfx/src/gfx_gol_group_box.c</AddFile>
                    <AddFile>$MAL/framework/gfx/src/gfx_gol.c</AddFile>
                    <AddFile>$MAL/framework/gfx/src/gfx_primitive.c</AddFile>
                </Folder>
            </Project>
            <Header>
                <![CDATA[
#define ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]   [NEXT_NUMID]
]]>
            </Header>
            <Constructor>
                <![CDATA[
GFX_GOL_GROUPBOX *p[CONTROLID_NOINDEX][CONTROLID_INDEX];
]]>
            </Constructor>
            <Code>
                <![CDATA[
    p[CONTROLID_NOINDEX][CONTROLID_INDEX] = GFX_GOL_GroupboxCreate(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX],[LEFT],[TOP],[RIGHT],[BOTTOM],[STATE],(GFX_XCHAR*)[WIDGETTEXT],[ALIGNMENT],(GFX_GOL_OBJ_SCHEME *)&GOLScheme_[SCHEME]);
]]>
            </Code>
            <State>
                <Enabled True="GFX_GOL_GROUPBOX_DRAW_STATE" False="GFX_GOL_GROUPBOX_DRAW_STATE|GFX_GOL_GROUPBOX_DISABLED_STATE" />
                <Hidden False="GFX_GOL_GROUPBOX_DRAW_STATE" True="GFX_GOL_GROUPBOX_HIDE_STATE" />
            </State>
            <Alignment>
                <Horizontal Left="GFX_ALIGN_LEFT" Right="GFX_ALIGN_RIGHT" Center="GFX_ALIGN_HCENTER" />
                <Vertical Top="GFX_ALIGN_TOP" Bottom="GFX_ALIGN_BOTTOM" Center="GFX_ALIGN_VCENTER" />
                <!-- TODO: GFX_ALIGN_CENTER -->
            </Alignment>
            <Events>
                <Event Name="GFX_GOL_GROUPBOX_ACTION_SELECTED" LegacyName="GB_MSG_SELECTED" Description="GroupBox selected" PlayerEvent="MOUSE_DOWN" />
            </Events>
            <Actions>
                <Action Name="Use Widget ID" Code="ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]" />
                <Action Name="Set GroupBox Text"
                                Code="GFX_GOL_GroupboxTextSet((GFX_GOL_GROUPBOX *)GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]), (GFX_XCHAR *) $Quoted string constant or variable:|&quot;New text&quot;$);[NEWLINE]"
                                Help="Sets the string used for the object"/>
                <Action Name="Get GroupBox Text"
                                Code="GFX_XCHAR *pText;
							pText=GFX_GOL_GroupboxTextGet((GFX_GOL_GROUPBOX *)GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]));[NEWLINE]"
                                Help="Returns pointer to the text string being used"/>
                <Action Name="Hide GroupBox" Code="GFX_GOL_ObjectStateSet(GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]), GFX_GOL_GROUPBOX_HIDE_STATE);[NEWLINE]" />
                <Action Name="Disable GroupBox" Code="GFX_GOL_ObjectStateSet(GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]), GFX_GOL_GROUPBOX_DISABLED_STATE);[NEWLINE]" />
                <Action Name="Enable GroupBox" Code="GFX_GOL_ObjectStateClear(GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]), GFX_GOL_GROUPBOX_DISABLED_STATE);[NEWLINE]" />
                <Action Name="Show/Update GroupBox" Code="GFX_GOL_ObjectStateSet(GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]), GFX_GOL_GROUPBOX_DRAW_STATE);[NEWLINE]" />
                <Action Name="Use Text Buffer name" Code="[CONTROLID_NOINDEX][CONTROLID_INDEX]_Text" />
            </Actions>
        </GroupBox>
        <ListBox>
            <GOL>Yes</GOL>
            <Project>
                <Folder Name="Header Files/framework/gfx">
                    <AddFile>$MAL/framework/gfx/gfx_gol_list_box.h</AddFile>
                </Folder>
                <Folder Name="Source Files/framework/gfx">
                    <AddFile>$MAL/framework/gfx/src/gfx_gol_list_box.c</AddFile>
                    <AddFile>$MAL/framework/gfx/src/gfx_gol.c</AddFile>
                    <AddFile>$MAL/framework/gfx/src/gfx_primitive.c</AddFile>
                </Folder>
            </Project>
            <Header>
                <![CDATA[
#define ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]   [NEXT_NUMID]
]]>
            </Header>
            <Constructor>
                <![CDATA[
    GFX_GOL_LISTBOX *p[CONTROLID_NOINDEX][CONTROLID_INDEX];
]]>
            </Constructor>
            <Code>
                <![CDATA[
    p[CONTROLID_NOINDEX][CONTROLID_INDEX] = GFX_GOL_ListBoxCreate(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX],[LEFT],[TOP],[RIGHT],[BOTTOM],[STATE],(GFX_XCHAR*)[CONTROLID_NOINDEX]_Text[CONTROLID_INDEXPAR],[ALIGNMENT],(GFX_GOL_OBJ_SCHEME *)&GOLScheme_[SCHEME]);
]]>
            </Code>
            <State>
                <Enabled True="GFX_GOL_LISTBOX_DRAW_STATE" False="GFX_GOL_LISTBOX_DRAW_STATE|GFX_GOL_LISTBOX_DISABLED_STATE" />
                <Hidden False="GFX_GOL_LISTBOX_DRAW_STATE" True="GFX_GOL_LISTBOX_HIDE_STATE" />
                <SingleSel True="GFX_GOL_LISTBOX_SINGLE_SELECT_STATE" False="GFX_GOL_LISTBOX_DRAW_STATE" />
            </State>
            <Alignment>
                <Horizontal Left="GFX_ALIGN_LEFT" Right="GFX_ALIGN_RIGHT" Center="GFX_ALIGN_HCENTER" />
                <Vertical Top="GFX_ALIGN_TOP" Bottom="GFX_ALIGN_BOTTOM" Center="GFX_ALIGN_VCENTER" />
                <!-- TODO: GFX_ALIGN_CENTER -->
            </Alignment>
            <Events>
                <Event Name="GFX_GOL_LISTBOX_ACTION_SELECTED" LegacyName="LB_MSG_SEL" Description="ListBox item selected" PlayerEvent="MOUSE_DOWN" />
                <Event Name="GFX_GOL_LISTBOX_ACTION_MOVE" LegacyName="LB_MSG_MOVE" Description="ListBox item moved" />
                <Event Name="GFX_GOL_LISTBOX_ACTION_TOUCHSCREEN" LegacyName="LB_MSG_TOUCHSCREEN" Description="ListBox touchscreen selected" />
            </Events>
            <Actions>
                <!-- TODO All Listbox Actions (a LOT!) -->
                <Action Name="Use Widget ID" Code="ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]" />
                <Action Name="Hide ListBox" Code="GFX_GOL_ObjectStateSet(GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]), GFX_GOL_LISTBOX_HIDE_STATE);[NEWLINE]" />
                <Action Name="Disable ListBox" Code="GFX_GOL_ObjectStateSet(GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]), GFX_GOL_LISTBOX_DISABLED_STATE);[NEWLINE]" />
                <Action Name="Enable ListBox" Code="GFX_GOL_ObjectStateClear(GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]), GFX_GOL_LISTBOX_DISABLED_STATE);[NEWLINE]" />
                <Action Name="Show/Update ListBox" Code="GFX_GOL_ObjectStateSet(GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]), GFX_GOL_LISTBOX_DRAW_STATE);[NEWLINE]" />
                <Action Name="Use Text Buffer name" Code="[CONTROLID_NOINDEX][CONTROLID_INDEX]_Text" />
                <Action Name="=== Using pointer ===" Code="" />
                <Action Name="Create pointer var (mandatory)" Code="GFX_GOL_LISTBOX *pLb[CONTROLID_NOINDEX][CONTROLID_INDEX]=(GFX_GOL_LISTBOX *) GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]);[NEWLINE]" />
                <Action Name="Hide ListBox (2)" Code="GFX_GOL_ObjectStateSet(pLb[CONTROLID_NOINDEX][CONTROLID_INDEX], GFX_GOL_LISTBOX_HIDE_STATE);[NEWLINE]" />
                <Action Name="Disable ListBox (2)" Code="GFX_GOL_ObjectStateSet(pLb[CONTROLID_NOINDEX][CONTROLID_INDEX], GFX_GOL_LISTBOX_DISABLED_STATE);[NEWLINE]" />
                <Action Name="Enable ListBox (2)" Code="GFX_GOL_ObjectStateClear(pLb[CONTROLID_NOINDEX][CONTROLID_INDEX], GFX_GOL_LISTBOX_DISABLED_STATE);[NEWLINE]" />
                <Action Name="Show/Update ListBox (2)" Code="GFX_GOL_ObjectStateSet(pLb[CONTROLID_NOINDEX][CONTROLID_INDEX], GFX_GOL_LISTBOX_DRAW_STATE);[NEWLINE]" />
                <Action Name="Append item" Code="GFX_GOL_ListBoxItemAdd(pLb[CONTROLID_NOINDEX][CONTROLID_INDEX], NULL, (GFX_XCHAR *) $Quoted string constant or variable:|&quot;New item&quot;$, NULL, GFX_GOL_LISTBOX_ITEM_STATUS_REDRAW, 0);[NEWLINE]"
                        Help="Adds a new item to the Listbox"/>
                <Action Name="Get selected item" Code="GFX_GOL_LISTITEM *pSelItem=GFX_GOL_ListBoxSelectionGet(pLb[CONTROLID_NOINDEX][CONTROLID_INDEX], NULL);[NEWLINE]"
                        Help="Get selected item in the Listbox (text and data)"/>
                <Action Name="Get selected item's text" Code="GFX_XCHAR *pSelItemText=GFX_GOL_ListBoxSelectionGet(pLb[CONTROLID_NOINDEX][CONTROLID_INDEX], NULL)->pText;[NEWLINE]"
                        Help="Get text of selected item"/>
                <Action Name="Get selected item's data" Code="uint16_t SelItemData=GFX_GOL_ListBoxSelectionGet(pLb[CONTROLID_NOINDEX][CONTROLID_INDEX], NULL)->data;[NEWLINE]"
                        Help="Get data from selected item"/>
            </Actions>
        </ListBox>
        <Picture>
            <GOL>Yes</GOL>
            <Project>
                <Folder Name="Header Files/framework/gfx">
                    <AddFile>$MAL/framework/gfx/gfx_gol_picture.h</AddFile>
                </Folder>
                <Folder Name="Source Files/framework/gfx">
                    <AddFile>$MAL/framework/gfx/src/gfx_gol_picture.c</AddFile>
                    <AddFile>$MAL/framework/gfx/src/gfx_gol.c</AddFile>
                    <AddFile>$MAL/framework/gfx/src/gfx_primitive.c</AddFile>
                </Folder>
            </Project>
            <Header>
                <![CDATA[
#define ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]   [NEXT_NUMID]
]]>
            </Header>
            <Constructor>
                <![CDATA[
    GFX_GOL_PICTURECONTROL *p[CONTROLID_NOINDEX][CONTROLID_INDEX];
]]>
            </Constructor>
            <Code>
                <![CDATA[
    [BITMAP_POINTER_INIT]
    p[CONTROLID_NOINDEX][CONTROLID_INDEX] = GFX_GOL_PictureControlCreate(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX],[LEFT],[TOP],[RIGHT],[BOTTOM],[STATE],[SCALE],[BITMAP],(GFX_GOL_OBJ_SCHEME *)&GOLScheme_[SCHEME]);
]]>
            </Code>
            <State>
                <Enabled True="GFX_GOL_PICTURECONTROL_DRAW_STATE" False="GFX_GOL_PICTURECONTROL_DRAW_STATE|GFX_GOL_PICTURECONTROL_DISABLED_STATE" />
                <Hidden False="GFX_GOL_PICTURECONTROL_DRAW_STATE" True="GFX_GOL_PICTURECONTROL_HIDE_STATE" />
                <Frame Enabled="GFX_GOL_PICTURECONTROL_FRAME_STATE" Disabled="GFX_GOL_PICTURECONTROL_DRAW_STATE" />
            </State>
            <Events>
                <Event Name="GFX_GOL_PICTURECONTROL_ACTION_SELECTED" LegacyName="PICT_MSG_SELECTED" Description="Picture selected" PlayerEvent="MOUSE_DOWN" />
            </Events>
            <Actions>
                <Action Name="Use Widget ID" Code="ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]" />
                <Action Name="Set Picture Bitmap"
                                Code="GFX_GOL_PictureControlImageSet((GFX_GOL_PICTURECONTROL *)GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]), (void *)&amp;%BITMAP%); // Replace %BITMAP% with bitmap name as found in the Bitmap chooser[NEWLINE]"
                                Help="Sets the bitmap used in the object"/>
                <Action Name="Get Picture Bitmap"
                                Code="GFX_GOL_PICTURECONTROL *pBitmap;
							pBitmap=GFX_GOL_PictureControlImageGet((GFX_GOL_PICTURECONTROL *)GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]));[NEWLINE]"
                                Help="Returns the pointer to the bitmap used in the object"/>
                <Action Name="Get Picture Scale factor"
                                Code="char Scale;
							Scale=PictGetScale((GFX_GOL_PICTURECONTROL *)GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]));[NEWLINE]"
                                Help="Returns the current scale factor used to display the bitmap"/>
                <Action Name="Set Picture Scale factor"
                                Code="GFX_GOL_PictureControlScaleSet((GFX_GOL_PICTURECONTROL *)GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]), (char) $New scale (valid values are 1 or 2):|2$);[NEWLINE]"
                                Help="Sets the scale factor used to render the bitmap used in the object"/>
                <Action Name="Hide Picture" Code="GFX_GOL_ObjectStateSet(GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]), GFX_GOL_PICTURECONTROL_HIDE_STATE);[NEWLINE]" />
                <Action Name="Disable Picture" Code="GFX_GOL_ObjectStateSet(GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]), GFX_GOL_PICTURECONTROL_DISABLED_STATE);[NEWLINE]" />
                <Action Name="Enable Picture" Code="GFX_GOL_ObjectStateClear(GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]), GFX_GOL_PICTURECONTROL_DISABLED_STATE);[NEWLINE]" />
                <Action Name="Show/Update Picture" Code="GFX_GOL_ObjectStateSet(GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]), GFX_GOL_PICTURECONTROL_DRAW_STATE);[NEWLINE]" />
            </Actions>
        </Picture>
        <ProgressBar>
            <GOL>Yes</GOL>
            <Project>
                <Folder Name="Header Files/framework/gfx">
                    <AddFile>$MAL/framework/gfx/gfx_gol_progress_bar.h</AddFile>
                </Folder>
                <Folder Name="Source Files/framework/gfx">
                    <AddFile>$MAL/framework/gfx/src/gfx_gol_progress_bar.c</AddFile>
                    <AddFile>$MAL/framework/gfx/src/gfx_gol.c</AddFile>
                    <AddFile>$MAL/framework/gfx/src/gfx_primitive.c</AddFile>
                </Folder>
            </Project>
            <Header>
                <![CDATA[
#define ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]   [NEXT_NUMID]
]]>
            </Header>
            <Constructor>
                <![CDATA[
GFX_GOL_PROGRESSBAR *p[CONTROLID_NOINDEX][CONTROLID_INDEX];
]]>
            </Constructor>
            <Code>
                <![CDATA[
p[CONTROLID_NOINDEX][CONTROLID_INDEX] = GFX_GOL_ProgressBarCreate(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX],[LEFT],[TOP],[RIGHT],[BOTTOM],[STATE],[POS],[RANGE],(GFX_GOL_OBJ_SCHEME *)&GOLScheme_[SCHEME]);
]]>
            </Code>
            <State>
                <Enabled True="GFX_GOL_PROGRESSBAR_DRAW_STATE" False="GFX_GOL_PROGRESSBAR_DRAW_STATE|GFX_GOL_PROGRESSBAR_DISABLED_STATE" />
                <Hidden False="GFX_GOL_PROGRESSBAR_DRAW_STATE" True="GFX_GOL_PROGRESSBAR_HIDE_STATE" />
                <Orientation Horizontal="GFX_GOL_PROGRESSBAR_DRAW_STATE" Vertical="GFX_GOL_PROGRESSBAR_VERTICAL_STATE" />
                <ShowPercentage True="GFX_GOL_PROGRESSBAR_DRAW_STATE" False="GFX_GOL_PROGRESSBAR_NOPROGRESS_STATE" />
            </State>
            <Events>
                <Event Name="GFX_GOL_PROGRESSBAR_ACTION_SELECTED" LegacyName="PB_MSG_SELECTED" Description="ProgressBar selected" PlayerEvent="MOUSE_DOWN" />
            </Events>
            <Actions>
                <Action Name="Use Widget ID" Code="ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]" />
                <Action Name="Get ProgressBar Position"
                                Code="((GFX_GOL_PROGRESSBAR *)GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]))->pos"
                                Help="Returns the current progress bar position"/>
                <Action Name="Get ProgressBar Position and put it in a variable"
                                Code="$Variable name where to store position:|myPos$ = ((GFX_GOL_PROGRESSBAR *)GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]))->pos; [NEWLINE]"
                                Help="Sets a variable with the current progress bar position"/>
                <Action Name="Set ProgressBar Position"
                                Code="GFX_GOL_ProgressBarPositionSet((GFX_GOL_PROGRESSBAR *)GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]), $Numeric constant or variable:|50$);[NEWLINE]"
                                Help="Sets the position of the progress bar. Position should be in the given range inclusive"/>
                <Action Name="Redraw Bar"
                                Code="GFX_GOL_ObjectStateSet(GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]), GFX_GOL_PROGRESSBAR_DRAW_BAR_STATE);[NEWLINE]"
                                Help="Redraws the Bar only. Use after having changed ProgressBar Position"/>
                <Action Name="Get ProgressBar Range"
                                Code="$Variable name where to store range:|myRange$ = GFX_GOL_ProgressBarRangeGet((GFX_GOL_PROGRESSBAR *)GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]));[NEWLINE]"
                                Help="Returns the current range of the progress bar"/>
                <Action Name="Set ProgressBar Range"
                                Code="GFX_GOL_ProgressBarRangeSet((GFX_GOL_PROGRESSBAR *)GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]), $Numeric constant or variable:|100$);[NEWLINE]"
                                Help="Sets the range of the progress bar. Calling this function also resets the position equal to the new range value"/>
                <Action Name="Hide ProgressBar" Code="GFX_GOL_ObjectStateSet(GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]), GFX_GOL_PROGRESSBAR_HIDE_STATE);[NEWLINE]" />
                <Action Name="Disable ProgressBar" Code="GFX_GOL_ObjectStateSet(GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]), GFX_GOL_PROGRESSBAR_DISABLED_STATE);[NEWLINE]" />
                <Action Name="Enable ProgressBar" Code="GFX_GOL_ObjectStateClear(GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]), GFX_GOL_PROGRESSBAR_DISABLED_STATE);[NEWLINE]" />
                <Action Name="Show/Update ProgressBar" Code="GFX_GOL_ObjectStateSet(GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]), GFX_GOL_PROGRESSBAR_DRAW_STATE);[NEWLINE]" />
                <Action Name="=== Using pointer ===" Code="" />
                <Action Name="Create pointer var (mandatory)" Code="GFX_GOL_PROGRESSBAR *pPb[CONTROLID_NOINDEX][CONTROLID_INDEX]=(GFX_GOL_PROGRESSBAR *)GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]);[NEWLINE]" />
                <Action Name="Get ProgressBar Position (2)"
                                Code="pPb[CONTROLID_NOINDEX][CONTROLID_INDEX]->pos"
                                Help="Returns the current progress bar position"/>
                <Action Name="Get ProgressBar Position and put it in a variable (2)"
                                Code="$Variable name where to store position:|myPos$ = pPb[CONTROLID_NOINDEX][CONTROLID_INDEX]->pos; [NEWLINE]"
                                Help="Sets a variable with the current progress bar position"/>
                <Action Name="Set ProgressBar Position (2)"
                                Code="GFX_GOL_ProgressBarPositionSet(pPb[CONTROLID_NOINDEX][CONTROLID_INDEX], $Numeric constant or variable:|50$);[NEWLINE]"
                                Help="Sets the position of the progress bar. Position should be in the given range inclusive"/>
                <Action Name="Redraw Bar (2)"
                                Code="GFX_GOL_ObjectStateSet(pPb[CONTROLID_NOINDEX][CONTROLID_INDEX], GFX_GOL_PROGRESSBAR_DRAW_BAR_STATE);[NEWLINE]"
                                Help="Redraws the Bar only. Use after having changed ProgressBar Position"/>
                <Action Name="Get ProgressBar Range (2)"
                                Code="$Variable name where to store range:|myRange$ = GFX_GOL_ProgressBarRangeGet(pPb[CONTROLID_NOINDEX][CONTROLID_INDEX]);[NEWLINE]"
                                Help="Returns the current range of the progress bar"/>
                <Action Name="Set ProgressBar Range (2)"
                                Code="GFX_GOL_ProgressBarRangeSet(pPb[CONTROLID_NOINDEX][CONTROLID_INDEX], $Numeric constant or variable:|100$);[NEWLINE]"
                                Help="Sets the range of the progress bar. Calling this function also resets the position equal to the new range value"/>
                <Action Name="Hide ProgressBar (2)" Code="GFX_GOL_ObjectStateSet(pPb[CONTROLID_NOINDEX][CONTROLID_INDEX], GFX_GOL_PROGRESSBAR_HIDE_STATE);[NEWLINE]" />
                <Action Name="Disable ProgressBar (2)" Code="GFX_GOL_ObjectStateSet(pPb[CONTROLID_NOINDEX][CONTROLID_INDEX], GFX_GOL_PROGRESSBAR_DISABLED_STATE);[NEWLINE]" />
                <Action Name="Enable ProgressBar (2)" Code="GFX_GOL_ObjectStateClear(pPb[CONTROLID_NOINDEX][CONTROLID_INDEX], GFX_GOL_PROGRESSBAR_DISABLED_STATE);[NEWLINE]" />
                <Action Name="Show/Update ProgressBar (2)" Code="GFX_GOL_ObjectStateSet(pPb[CONTROLID_NOINDEX][CONTROLID_INDEX], GFX_GOL_PROGRESSBAR_DRAW_STATE);[NEWLINE]" />
            </Actions>
        </ProgressBar>
        <Slider>
            <GOL>Yes</GOL>
            <Project>
                <Folder Name="Header Files/framework/gfx">
                    <AddFile>$MAL/framework/gfx/gfx_gol_scroll_bar.h</AddFile>
                </Folder>
                <Folder Name="Source Files/framework/gfx">
                    <AddFile>$MAL/framework/gfx/src/gfx_gol_scroll_bar.c</AddFile>
                    <AddFile>$MAL/framework/gfx/src/gfx_gol.c</AddFile>
                    <AddFile>$MAL/framework/gfx/src/gfx_primitive.c</AddFile>
                </Folder>
            </Project>
            <Header>
                <![CDATA[
#define ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]   [NEXT_NUMID]
]]>
            </Header>
            <Constructor>
                <![CDATA[
GFX_GOL_SCROLLBAR *p[CONTROLID_NOINDEX][CONTROLID_INDEX];
]]>
            </Constructor>
            <Code>
                <![CDATA[
    p[CONTROLID_NOINDEX][CONTROLID_INDEX] = GFX_GOL_ScrollBarCreate(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX],[LEFT],[TOP],[RIGHT],[BOTTOM],[STATE],[RANGE],[PAGE],[POS],(GFX_GOL_OBJ_SCHEME *)&GOLScheme_[SCHEME]);
]]>
            </Code>
            <State>
                <Enabled True="GFX_GOL_SCROLLBAR_DRAW_STATE" False="GFX_GOL_SCROLLBAR_DRAW_STATE|GFX_GOL_SCROLLBAR_DISABLED_STATE" />
                <Hidden False="GFX_GOL_SCROLLBAR_DRAW_STATE" True="GFX_GOL_SCROLLBAR_HIDE_STATE" />
                <Orientation Horizontal="GFX_GOL_SCROLLBAR_DRAW_STATE" Vertical="GFX_GOL_SCROLLBAR_VERTICAL_STATE" />
                <SliderType Slider="GFX_GOL_SCROLLBAR_SLIDER_MODE_STATE" ScrollBar="GFX_GOL_SCROLLBAR_DRAW_STATE" />
            </State>
            <Events>
                <Event Name="GFX_GOL_SCROLLBAR_ACTION_INC" LegacyName="SLD_MSG_INC" Description="Slider incremented" />
                <Event Name="GFX_GOL_SCROLLBAR_ACTION_DEC" LegacyName="SLD_MSG_DEC" Description="Slider decremented" />
                <Event Name="GFX_GOL_OBJECT_ACTION_PASSIVE" LegacyName="OBJ_MSG_PASSIVE" Description="Slider released" />
            </Events>
            <Actions>
                <Action Name="Use Widget ID" Code="ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]" />
                <Action Name="Get Slider Position"
                                Code="((GFX_GOL_SCROLLBAR *)GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]))->pos"
                                Help="Returns the current position of the slider's thumb"/>
                <Action Name="Get Slider Position and store it in a variable"
                                Code="$Variable where to store position:|myPosition$ = ((GFX_GOL_SCROLLBAR *)GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]))->pos;[NEWLINE]"
                                Help="Stores the current position of the slider's thumb in a variable"/>
                <Action Name="Set Slider Position"
                                Code="((GFX_GOL_SCROLLBAR *)GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]))->pos=$Numeric constant or variable:|50$;[NEWLINE]"
                                Help="Sets the position of the slider thumb. Value should be in the set range inclusive. Object must be redrawn to reflect the change"/>
                <Action Name="Get Slider Range"
                                Code="int16_t range;
						range = GFX_GOL_ScrollBarRangeGet((GFX_GOL_SCROLLBAR *)GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]));[NEWLINE]"
                                Help="Returns the current range of the thumb"/>
                <Action Name="Set Slider Range"
                                Code="GFX_GOL_ScrollBarRangeSet((GFX_GOL_SCROLLBAR *)GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]), $Numeric constant or variable:|100$);[NEWLINE]"
                                Help="Sets the range of the thumb. If this field is changed Object must be completely redrawn to reflect the change"/>
                <Action Name="Hide Slider" Code="GFX_GOL_ObjectStateSet(GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]), GFX_GOL_SCROLLBAR_HIDE_STATE);[NEWLINE]" />
                <Action Name="Disable Slider" Code="GFX_GOL_ObjectStateSet(GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]), GFX_GOL_SCROLLBAR_DISABLED_STATE);[NEWLINE]" />
                <Action Name="Enable Slider" Code="GFX_GOL_ObjectStateGet(GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]), GFX_GOL_SCROLLBAR_DISABLED_STATE);[NEWLINE]" />
                <Action Name="Show/Update Slider" Code="GFX_GOL_ObjectStateSet(GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]), GFX_GOL_SCROLLBAR_DRAW_STATE);[NEWLINE]" />
                <Action Name="=== Using pointer ===" Code="" />
                <Action Name="Create pointer var (mandatory)" Code="GFX_GOL_SCROLLBAR *pSld[CONTROLID_NOINDEX][CONTROLID_INDEX]=(GFX_GOL_SCROLLBAR *)GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]);[NEWLINE]" />
                <Action Name="Get Slider Position (2)"
                                Code="pSld[CONTROLID_NOINDEX][CONTROLID_INDEX]->pos"
                                Help="Returns the current position of the slider's thumb"/>
                <Action Name="Get Slider Position and store it in a variable (2)"
                                Code="$Variable where to store position:|myPosition$ = pSld[CONTROLID_NOINDEX][CONTROLID_INDEX]->pos;[NEWLINE]"
                                Help="Stores the current position of the slider's thumb in a variable"/>
                <Action Name="Set Slider Position (2)"
                                Code="pSld[CONTROLID_NOINDEX][CONTROLID_INDEX]->pos=$Numeric constant or variable:|50$;[NEWLINE]"
                                Help="Sets the position of the slider thumb. Value should be in the set range inclusive. Object must be redrawn to reflect the change"/>
                <Action Name="Get Slider Range (2)"
                                Code="uint16_t range;
						range = GFX_GOL_ScrollBarRangeGet(pSld[CONTROLID_NOINDEX][CONTROLID_INDEX]);[NEWLINE]"
                                Help="Returns the current range of the thumb"/>
                <Action Name="Set Slider Range (2)"
                                Code="GFX_GOL_ScrollBarRangeSet(pSld[CONTROLID_NOINDEX][CONTROLID_INDEX], $Numeric constant or variable:|100$);[NEWLINE]"
                                Help="Sets the range of the thumb. If this field is changed Object must be completely redrawn to reflect the change"/>
                <Action Name="Hide Slider (2)" Code="GFX_GOL_ObjectStateSet(pSld[CONTROLID_NOINDEX][CONTROLID_INDEX], GFX_GOL_SCROLLBAR_HIDE_STATE);[NEWLINE]" />
                <Action Name="Disable Slider (2)" Code="GFX_GOL_ObjectStateSet(pSld[CONTROLID_NOINDEX][CONTROLID_INDEX], GFX_GOL_SCROLLBAR_DISABLED_STATE);[NEWLINE]" />
                <Action Name="Enable Slider (2)" Code="GFX_GOL_ObjectStateGet(pSld[CONTROLID_NOINDEX][CONTROLID_INDEX], GFX_GOL_SCROLLBAR_DISABLED_STATE);[NEWLINE]" />
                <Action Name="Show/Update Slider (2)" Code="GFX_GOL_ObjectStateSet(pSld[CONTROLID_NOINDEX][CONTROLID_INDEX], GFX_GOL_SCROLLBAR_DRAW_STATE);[NEWLINE]" />
            </Actions>
        </Slider>
        <Meter>
            <GOL>Yes</GOL>
            <Project>
                <Folder Name="Header Files/framework/gfx">
                    <AddFile>$MAL/framework/gfx/gfx_gol_meter.h</AddFile>
                </Folder>
                <Folder Name="Source Files/framework/gfx">
                    <AddFile>$MAL/framework/gfx/src/gfx_gol_meter.c</AddFile>
                    <AddFile>$MAL/framework/gfx/src/gfx_gol.c</AddFile>
                    <AddFile>$MAL/framework/gfx/src/gfx_primitive.c</AddFile>
                </Folder>
            </Project>
            <Header>
                <![CDATA[
#define ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]   [NEXT_NUMID]
]]>
            </Header>
            <Constructor>
                <![CDATA[
GFX_GOL_METER *p[CONTROLID_NOINDEX][CONTROLID_INDEX];
]]>
            </Constructor>
            <Code>
                <![CDATA[
    p[CONTROLID_NOINDEX][CONTROLID_INDEX] = GFX_GOL_MeterCreate(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX],[LEFT],[TOP],[RIGHT],[BOTTOM],[STATE],[TYPE],[VALUE],[MINVALUE],[MAXVALUE],(void *)&[TITLEFONT],(void *)&[VALUEFONT],(GFX_XCHAR*)[WIDGETTEXT],(GFX_GOL_OBJ_SCHEME *)&GOLScheme_[SCHEME]);
]]>
            </Code>
            <State>
                <Enabled True="GFX_GOL_METER_DRAW_STATE" False="GFX_GOL_METER_DRAW_STATE|GFX_GOL_METER_DISABLED_STATE" />
                <Hidden False="GFX_GOL_METER_DRAW_STATE" True="GFX_GOL_METER_HIDE_STATE" />
                <MeterType Normal="GFX_GOL_METER_DRAW_STATE" Ring="GFX_GOL_METER_RING_STATE" />
                <!-- TODO: Implement GFX_GOL_METER_ACCURACY_STATE -->
            </State>
            <Events>
                <Event Name="GFX_GOL_METER_ACTION_SET" LegacyName="MTR_MSG_SET" Description=" Meter set value" />
            </Events>
            <Actions>
                <Action Name="Use Widget ID" Code="ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]" />
                <Action Name="Set Meter Value"
                                Code="GFX_GOL_MeterValueSet((GFX_GOL_METER *)GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]), VALUE);[NEWLINE]"
                                Help="Sets the value of the meter"/>
                <Action Name="Get Meter Value"
                                Code="$Variable where to store value:|myValue$ = GFX_GOL_MeterValueGet((GFX_GOL_METER *)GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]));[NEWLINE]"
                                Help="Gets the current value of the meter"/>
                <Action Name="Increment Meter Value"
                                Code="GFX_GOL_MeterIncrement((GFX_GOL_METER *)GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]),DELTAVALUE);[NEWLINE]"
                                Help="This macro is used to directly increment the value of the meter"/>
                <Action Name="Decrement Meter Value"
                                Code="GFX_GOL_MeterDecrement((GFX_GOL_METER *)GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]),DELTAVALUE);[NEWLINE]"
                                Help="This macro is used to directly decrement the value of the meter"/>
                <Action Name="Update Meter" Code="GFX_GOL_ObjectStateSet(GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]), GFX_GOL_METER_DRAW_STATE_UPDATE);[NEWLINE]" />
                <Action Name="Hide Meter" Code="GFX_GOL_ObjectStateSet(GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]), GFX_GOL_METER_HIDE_STATE);[NEWLINE]" />
                <Action Name="Show Meter" Code="GFX_GOL_ObjectStateSet(GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]), GFX_GOL_METER_DRAW_STATE);[NEWLINE]" />
                <Action Name="Disable Meter" Code="GFX_GOL_ObjectStateSet(GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]), GFX_GOL_METER_DISABLED_STATE);[NEWLINE]" />
                <Action Name="Enable Meter" Code="GFX_GOL_ObjectStateGet(GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]), GFX_GOL_METER_DISABLED_STATE);[NEWLINE]" />
                <Action Name="Use Text Buffer name" Code="[CONTROLID_NOINDEX][CONTROLID_INDEX]_Text" />
            </Actions>
        </Meter>
        <TextEntry>
            <GOL>Yes</GOL>
            <Project>
                <Folder Name="Header Files/framework/gfx">
                    <AddFile>$MAL/framework/gfx/gfx_gol_text_entry.h</AddFile>
                </Folder>
                <Folder Name="Source Files/framework/gfx">
                    <AddFile>$MAL/framework/gfx/src/gfx_gol_text_entry.c</AddFile>
                    <AddFile>$MAL/framework/gfx/src/gfx_gol.c</AddFile>
                    <AddFile>$MAL/framework/gfx/src/gfx_primitive.c</AddFile>
                </Folder>
            </Project>
            <Header>
                <![CDATA[
#define ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]   [NEXT_NUMID]
]]>
            </Header>
            <Constructor>
                <![CDATA[
GFX_GOL_TEXTENTRY *p[CONTROLID];
]]>
            </Constructor>
            <CodeHead>
                <![CDATA[
GFX_XCHAR *[CONTROLID_NOINDEX][CONTROLID_INDEX]_KEYS[]={[KEYS]};
]]>
            </CodeHead>
            <Code>
                <![CDATA[
    p[CONTROLID] = GFX_GOL_TextEntryCreate(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX],[LEFT],[TOP],[RIGHT],[BOTTOM],[STATE],[HORKEYS],[VERKEYS],[CONTROLID_NOINDEX][CONTROLID_INDEX]_KEYS,(GFX_XCHAR*)[CONTROLID]_Text,[ALIGNMENT],[BUFFERLEN],(void *)&[DISPFONT],(GFX_GOL_OBJ_SCHEME *)&GOLScheme_[SCHEME]);
        // Conditional key assignment.
        // The following GFX_GOL_TextEntryKeyCommandSet are wrapped inside #if/#endif pre-processor statements so that only assigned keys statements will be compiled and executed
        #if ([ENTERKEYIDX] != -1)
            GFX_GOL_TextEntryKeyCommandSet(p[CONTROLID],[ENTERKEYIDX],GFX_GOL_TEXTENTRY_ENTER_COM);
        #endif
        #if ([DELETEKEYIDX] != -1)
            GFX_GOL_TextEntryKeyCommandSet(p[CONTROLID],[DELETEKEYIDX],GFX_GOL_TEXTENTRY_DELETE_COM);
        #endif
        #if ([SPACEKEYIDX] != -1)
            GFX_GOL_TextEntryKeyCommandSet(p[CONTROLID],[SPACEKEYIDX],GFX_GOL_TEXTENTRY_SPACE_COM);
        #endif
]]>
            </Code>
            <State>
                <Enabled True="GFX_GOL_TEXTENTRY_DRAW_STATE" False="GFX_GOL_TEXTENTRY_DRAW_STATE|GFX_GOL_TEXTENTRY_DISABLED_STATE" />
                <Hidden False="GFX_GOL_TEXTENTRY_DRAW_STATE" True="GFX_GOL_TEXTENTRY_HIDE_STATE" />
                <EchoHide True="GFX_GOL_TEXTENTRY_DRAW_STATE|GFX_GOL_TEXTENTRY_ECHO_HIDE_STATE" False="GFX_GOL_TEXTENTRY_DRAW_STATE" />
            </State>
            <Alignment>
                <Horizontal Left="GFX_ALIGN_LEFT" Right="GFX_ALIGN_RIGHT" Center="GFX_ALIGN_HCENTER" />
                <Vertical Top="GFX_ALIGN_TOP" Bottom="GFX_ALIGN_BOTTOM" Center="GFX_ALIGN_VCENTER" />
                <!-- TODO: GFX_ALIGN_CENTER -->
            </Alignment>
            <Events>
                <Event Name="GFX_GOL_TEXTENTRY_ACTION_ADD_CHAR" LegacyName="TE_MSG_ADD_CHAR" Description="TextEntry character inserted" />
                <Event Name="GFX_GOL_TEXTENTRY_ACTION_DELETE" LegacyName="TE_MSG_DELETE" Description="TextEntry character removed" />
                <Event Name="GFX_GOL_TEXTENTRY_ACTION_ENTER" LegacyName="TE_MSG_ENTER" Description="TextEntry Enter key pressed" />
                <Event Name="GFX_GOL_TEXTENTRY_ACTION_SPACE" LegacyName="TE_MSG_SPACE" Description="TextEntry Space key pressed" />
                <Event Name="GFX_GOL_TEXTENTRY_ACTION_PRESSED" LegacyName="TE_MSG_PRESSED" Description="TextEntry touched" PlayerEvent="MOUSE_DOWN" />
                <Event Name="GFX_GOL_TEXTENTRY_ACTION_RELEASED" LegacyName="TE_MSG_RELEASED" Description="TextEntry released" PlayerEvent="MOUSE_UP" />
            </Events>
            <Actions>
                <Action Name="Use Widget ID" Code="ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]" />
                <Action Name="Clear Text Buffer"
                                Code="GFX_GOL_TextEntryBufferClear((GFX_GOL_TEXTENTRY *)GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]));[NEWLINE]"
                                Help="This function will clear the data in the display. You must set the drawing state bit TE_UPDATE_TEXT to update the TEXTENTRY on the screen"/>
                <Action Name="Use Text Buffer"
                                Code="GFX_XCHAR *pText;
							pText = GFX_GOL_TextEntryBufferGet((GFX_GOL_TEXTENTRY *)GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]));[NEWLINE]"
                                Help="Returns a pointer to the buffer used"/>
                <Action Name="Set TextEntry Text"
                                Code="GFX_GOL_TextEntryBufferSet((GFX_GOL_TEXTENTRY *)GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]), (GFX_XCHAR *)$Quoted string constant or variable:|&quot;New text&quot;$, (int16_t) MaxSize);[NEWLINE]"
                                Help="This function sets the buffer used to display text. If the buffer is initialized with a string, the string must be a null terminated
								string. If the string length is greater than MaxSize, string will be truncated to MaxSize. pText must point to a valid memory
								location with size equal to MaxSize+1. The +1 is used for the string terminator"/>
                <Action Name="Hide TextEntry" Code="GFX_GOL_ObjectStateSet(GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]), GFX_GOL_TEXTENTRY_HIDE_STATE);[NEWLINE]" />
                <Action Name="Disable TextEntry" Code="GFX_GOL_ObjectStateSet(GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]), GFX_GOL_TEXTENTRY_DISABLED_STATE);[NEWLINE]" />
                <Action Name="Enable TextEntry" Code="GFX_GOL_ObjectStateGet(GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]), GFX_GOL_TEXTENTRY_DISABLED_STATE);[NEWLINE]" />
                <Action Name="Redraw edited Text" Code="GFX_GOL_ObjectStateSet(GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]), GFX_GOL_TEXTENTRY_UPDATE_TEXT_STATE);[NEWLINE]" />
                <Action Name="Show/Update TextEntry" Code="GFX_GOL_ObjectStateSet(GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]), GFX_GOL_TEXTENTRY_DRAW_STATE);[NEWLINE]" />
            </Actions>
        </TextEntry>
        <Arc>
            <GOL>No</GOL>
            <Project>
                <Folder Name="Header Files/framework/gfx">
                    <AddFile>$MAL/framework/gfx/gfx_primitive.h</AddFile>
                </Folder>
                <Folder Name="Source Files/framework/gfx">
                    <AddFile>$MAL/framework/gfx/src/gfx_primitive.c</AddFile>
                </Folder>
            </Project>
            <Header>
            </Header>
            <CodeHead>
            </CodeHead>
            <Constructor>
            </Constructor>
            <Code>
                <![CDATA[
        // Arc [CONTROLID_NOINDEX][CONTROLID_INDEX]
        GFX_ColorSet([COLOR]);  //[COLOR_STRING]
        [STATEMENT]
]]>
            </Code>
            <Statement>
                <Fill True="while(!GFX_BevelFillDraw([XL],[YT],[XR],[YB],[RADIUS2]));"
                      False="while(!GFX_ThickBevelDraw([XL],[YT],[XR],[YB],[RADIUS1],[RADIUS2],[OCTANT]));" />
            </Statement>
            <State>
            </State>
        </Arc>
        <Circle>
            <GOL>No</GOL>
            <Project>
                <Folder Name="Header Files/framework/gfx">
                    <AddFile>$MAL/framework/gfx/gfx_primitive.h</AddFile>
                </Folder>
                <Folder Name="Source Files/framework/gfx">
                    <AddFile>$MAL/framework/gfx/src/gfx_primitive.c</AddFile>
                </Folder>
            </Project>
            <Header>
            </Header>
            <CodeHead>
            </CodeHead>
            <Constructor>
            </Constructor>
            <Code>
                <![CDATA[
        // Circle [CONTROLID_NOINDEX][CONTROLID_INDEX]
        GFX_LineStyleSet([LINETYPE]);
        GFX_ColorSet([COLOR]);  //[COLOR_STRING]
        while(![STATEMENT]([X],[Y],[RADIUS]));
]]>
            </Code>
            <Statement>
                <Fill True="GFX_CircleFillDraw" False="GFX_CircleDraw" />
            </Statement>
        </Circle>
        <Line>
            <GOL>No</GOL>
            <Project>
                <Folder Name="Header Files/framework/gfx">
                    <AddFile>$MAL/framework/gfx/gfx_primitive.h</AddFile>
                </Folder>
                <Folder Name="Source Files/framework/gfx">
                    <AddFile>$MAL/framework/gfx/src/gfx_primitive.c</AddFile>
                </Folder>
            </Project>
            <Header>
            </Header>
            <CodeHead>
            </CodeHead>
            <Constructor>
            </Constructor>
            <Code>
                <![CDATA[
        // Line [CONTROLID_NOINDEX][CONTROLID_INDEX]
        GFX_LineStyleSet([LINETYPE]);
        GFX_ColorSet([COLOR]);  //[COLOR_STRING]
        while(!GFX_LineDraw([X1],[Y1],[X2],[Y2]));
]]>
            </Code>
            <State>
            </State>
        </Line>
        <Rectangle>
            <GOL>No</GOL>
            <Project>
                <Folder Name="Header Files/framework/gfx">
                    <AddFile>$MAL/framework/gfx/gfx_primitive.h</AddFile>
                </Folder>
                <Folder Name="Source Files/framework/gfx">
                    <AddFile>$MAL/framework/gfx/src/gfx_primitive.c</AddFile>
                </Folder>
            </Project>
            <Header>
            </Header>
            <CodeHead>
            </CodeHead>
            <Constructor>
            </Constructor>
            <Code>
                <![CDATA[
    // Rectangle [CONTROLID_NOINDEX][CONTROLID_INDEX]
    GFX_ColorSet([COLOR]);  //[COLOR_STRING]
    [STATEMENT]
]]>
            </Code>
            <Statement>
                <Fill True="GFX_FillStyleSet(GFX_FILL_STYLE_COLOR);
    while(!GFX_RectangleFillDraw([LEFT],[TOP],[RIGHT],[BOTTOM]));"
                      False="GFX_LineStyleSet([LINETYPE]);
    GFX_RectangleDraw([LEFT],[TOP],[RIGHT],[BOTTOM]);" />
            </Statement>
        </Rectangle>
        <OutTextXY>
            <GOL>No</GOL>
            <Project>
                <Folder Name="Header Files/framework/gfx">
                    <AddFile>$MAL/framework/gfx/gfx_primitive.h</AddFile>
                </Folder>
                <Folder Name="Source Files/framework/gfx">
                    <AddFile>$MAL/framework/gfx/src/gfx_primitive.c</AddFile>
                </Folder>
            </Project>
            <Header>
            </Header>
            <CodeHead>
            </CodeHead>
            <Constructor>
            </Constructor>
            <Code>
                <![CDATA[
        // OutTextXY [CONTROLID_NOINDEX][CONTROLID_INDEX]
        GFX_FontSet((void *) &[FONT]);
        GFX_ColorSet([COLOR]);	// [COLOR_STRING]
        while(!GFX_TextStringDraw([LEFT],[TOP],(GFX_XCHAR*)[WIDGETTEXT],[TEXTLENGTH])); // [TEXT]
]]>
            </Code>
            <Statement>
                <Fill True="Bar" False="Rectangle" />
            </Statement>
        </OutTextXY>
        <Gradient>
            <GOL>No</GOL>
            <Project>
                <Folder Name="Header Files/framework/gfx">
                    <AddFile>$MAL/framework/gfx/gfx_primitive.h</AddFile>
                </Folder>
                <Folder Name="Source Files/framework/gfx">
                    <AddFile>$MAL/framework/gfx/src/gfx_primitive.c</AddFile>
                </Folder>
            </Project>
            <Header>
            </Header>
            <CodeHead>
            </CodeHead>
            <Constructor>
            </Constructor>
            <Code>
                <![CDATA[
        // Gradient [CONTROLID_NOINDEX][CONTROLID_INDEX]
        #ifndef GFX_CONFIG_GRADIENT_DISABLE
            GFX_GradientColorSet([COLOR1], [COLOR2]);
            GFX_FillStyleSet([FILLSTYLE]);
            while(!GFX_BevelGradientDraw([LEFT], [TOP], [RIGHT], [BOTTOM], [RADIUS]));
        #endif
]]>
            </Code>
            <State>
            </State>
        </Gradient>
        <PutImage>
            <GOL>No</GOL>
            <Project>
                <Folder Name="Header Files/framework/gfx">
                    <AddFile>$MAL/framework/gfx/gfx_primitive.h</AddFile>
                </Folder>
                <Folder Name="Source Files/framework/gfx">
                    <AddFile>$MAL/framework/gfx/src/gfx_primitive.c</AddFile>
                </Folder>
            </Project>
            <GraphicsConfig>
            </GraphicsConfig>
            <Header>
            </Header>
            <CodeHead>
            </CodeHead>
            <Constructor>
            </Constructor>
            <Code>
                <![CDATA[
        // PutImage [CONTROLID_NOINDEX][CONTROLID_INDEX]
        [BITMAP_POINTER_INIT]
        GFX_ImageDraw([LEFT], [TOP], [BITMAP]);
]]>
            </Code>
            <State>
            </State>
        </PutImage>

        <ComboBox>
            <Header>
                <![CDATA[
// ComboBox - IDs for Widgets created by [CONTROLID_NOINDEX][CONTROLID_INDEX]
]]>
            </Header>
            <Constructor>
            </Constructor>
            <Code>
                <![CDATA[
// ---------------------------------------
// ComboBox - [CONTROLID_NOINDEX][CONTROLID_INDEX]
// ---------------------------------------
]]>
            </Code>
            <State>
                <!--<Enabled True="GFX_GOL_LISTBOX_DRAW_STATE" False="GFX_GOL_LISTBOX_DRAW_STATE|GFX_GOL_LISTBOX_DISABLED_STATE" />
			<Hidden False="GFX_GOL_LISTBOX_DRAW_STATE" True="GFX_GOL_LISTBOX_HIDE_STATE" />
			<HorizAlign Left="GFX_GOL_LISTBOX_DRAW_STATE" Right="LB_RIGHT_ALIGN" Center="LB_CENTER_ALIGN" />
			<SingleSel True="GFX_GOL_LISTBOX_SINGLE_SELECT_STATE" False="GFX_GOL_LISTBOX_DRAW_STATE" />-->
            </State>
            <Events>
                <!--<Event Name="GFX_GOL_LISTBOX_ACTION_SELECTED" Description="ListBox item selected" PlayerEvent="MOUSE_DOWN" />
			<Event Name="GFX_GOL_LISTBOX_ACTION_MOVE" Description="ListBox item moved" />
			<Event Name="GFX_GOL_LISTBOX_ACTION_TOUCHSCREEN" Description="ListBox touchscreen selected" />-->
            </Events>
            <Actions>
                <!--<Action Name="Use Widget ID" Code="ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]" />
			<Action Name="Hide ListBox" Code="GFX_GOL_ObjectStateSet(GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]), GFX_GOL_LISTBOX_HIDE_STATE);[NEWLINE]" />
			<Action Name="Show/Update ListBox" Code="GFX_GOL_ObjectStateSet(GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]), GFX_GOL_LISTBOX_DRAW_STATE);[NEWLINE]" />
			<Action Name="Use Text Buffer name" Code="[CONTROLID_NOINDEX][CONTROLID_INDEX]_Text" />-->
            </Actions>
        </ComboBox>

        <All>
            <Code>
                <!--if(p[CONTROLID_NOINDEX][CONTROLID_INDEX]==NULL){/*CreateError(0);*/while(1);} //Fatal Error, Check for memory leak or heap size-->
            </Code>
        </All>
        <SuperGauge>
            <GOL>Yes</GOL>
            <Project>
                <Folder Name="Header Files/appMLA/system_config/[ACTIVECONFIG]/vgdd">
                    <AddVGDDFile DestFile="supergauge.h">SuperGaugeMLA.h</AddVGDDFile>
                    <AddVGDDFile DestFile="fontled7seg.h">FontLed7SegMLA.h</AddVGDDFile>
                </Folder>
                <Folder Name="Source Files/appMLA/system_config/[ACTIVECONFIG]/vgdd">
                    <AddVGDDFile DestFile="supergauge.c">SuperGaugeMLA.c</AddVGDDFile>
                    <AddVGDDFile DestFile="fontled7seg.c">FontLed7SegMLA.c</AddVGDDFile>
                    <AddFile>$MAL/framework/gfx/src/gfx_gol.c</AddFile>
                    <AddFile>$MAL/framework/gfx/src/gfx_primitive.c</AddFile>
                </Folder>
            </Project>
            <Header>
                <![CDATA[
#define ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]   [NEXT_NUMID]
extern int16_t Segments[CONTROLID_NOINDEX][CONTROLID_INDEX][];
]]>
            </Header>
            <HeadersIncludes>
                <![CDATA[
#include "supergauge.h"
]]>
            </HeadersIncludes>
            <CodeHeadComment>
            </CodeHeadComment>
            <CodeHead>
            </CodeHead>
            <Constructor>
                <![CDATA[
SUPERGAUGE *p[CONTROLID_NOINDEX][CONTROLID_INDEX];
int16_t Segments[CONTROLID_NOINDEX][CONTROLID_INDEX][] = {[SEGMENTSARRAY]};
]]>
            </Constructor>
            <Code>
                <![CDATA[
    p[CONTROLID_NOINDEX][CONTROLID_INDEX] = SgCreate(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX],[LEFT],[TOP],[RIGHT],[BOTTOM],[STATE]
        ,(void *)&[DIALSCALEFONT]	// pDialScaleFont
        ,(GFX_XCHAR*)[WIDGETTEXT]
        ,[SEGMENTSCOUNT]	// SegmentsCount
        ,(void *)&Segments[CONTROLID_NOINDEX][CONTROLID_INDEX]	// pSegments
        ,[PARAMETERS] // SuperGauge Parameters
        ,(GFX_GOL_OBJ_SCHEME *)&GOLScheme_[SCHEME]);
]]>
            </Code>
            <State>
                <Enabled True="SG_DRAW" False="SG_DRAW|SG_DISABLED" />
                <Hidden False="SG_DRAW" True="SG_HIDE" />
                <NoPanel Enabled="SG_NOPANEL" Disabled="SG_DRAW" />
                <PointerLine NORMAL_LINE="SG_DRAW" THICK_LINE="SG_POINTER_THICK" />
            </State>
            <Events>
                <Event Name="SG_MSG_TOUCHSCREEN" Description="SuperGauge has been touched" />
            </Events>
            <Actions>
                <Action Name="Use Widget ID" Code="ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]" />
                <Action Name="Set SuperGauge Value" Code="SgSetVal((SUPERGAUGE *)GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]),VALUE);[NEWLINE]" />
                <Action Name="Update SuperGauge" Code="GFX_GOL_ObjectStateSet(GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]), SG_DRAW_UPDATE);[NEWLINE]" />
                <Action Name="Hide SuperGauge" Code="GFX_GOL_ObjectStateSet(GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]), SG_HIDE);[NEWLINE]" />
                <Action Name="Show SuperGauge" Code="GFX_GOL_ObjectStateSet(GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]), SG_DRAW);[NEWLINE]" />
            </Actions>
        </SuperGauge>
        <Indicator>
            <GOL>Yes</GOL>
            <GraphicsConfig>
                <![CDATA[
USE_INDICATOR
]]>
            </GraphicsConfig>
            <Project>
                <Folder Name="Header Files/appMLA/system_config/[ACTIVECONFIG]/vgdd">
                    <AddVGDDFile DestFile="indicator.h">IndicatorMLA.h</AddVGDDFile>
                </Folder>
                <Folder Name="Source Files/appMLA/system_config/[ACTIVECONFIG]/vgdd">
                    <AddVGDDFile DestFile="indicator.c">IndicatorMLA.c</AddVGDDFile>
                    <AddFile>$MAL/framework/gfx/src/gfx_gol.c</AddFile>
                    <AddFile>$MAL/framework/gfx/src/gfx_primitive.c</AddFile>
                </Folder>
            </Project>
            <Header>
                <![CDATA[
#define ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]   [NEXT_NUMID]
]]>
            </Header>
            <HeadersIncludes>
                <![CDATA[
#include "indicator.h"
]]>
            </HeadersIncludes>
            <CodeHeadComment>
            </CodeHeadComment>
            <CodeHead>
            </CodeHead>
            <Constructor>
                <![CDATA[
INDICATOR *p[CONTROLID_NOINDEX][CONTROLID_INDEX];
]]>
            </Constructor>
            <Code>
                <![CDATA[
    p[CONTROLID_NOINDEX][CONTROLID_INDEX] = IndCreate(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX],[LEFT],[TOP],[RIGHT],[BOTTOM],[STATE],[VALUE],[STYLE],[COLOUR],(GFX_XCHAR*)[WIDGETTEXT],(GFX_GOL_OBJ_SCHEME *)&GOLScheme_[SCHEME]);
]]>
            </Code>
            <State>
                <Enabled True="IND_DRAW" False="IND_DRAW|IND_DISABLED" />
                <Hidden False="IND_DRAW" True="IND_HIDE" />
                <TextAlign Left="IND_DRAW" Right="IND_RIGHT_ALIGN" Center="IND_CENTER_ALIGN" />
                <Frame Enabled="IND_FRAME" Disabled="IND_DRAW" />
            </State>
            <Events>
                <Event Name="IND_MSG_TOUCHSCREEN" Description="Indicator has been touched" />
            </Events>
            <Actions>
                <Action Name="Use Widget ID" Code="ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]" />
                <Action Name="Set Indicator Value" Code="IndSetVal((INDICATOR *)GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]),VALUE);[NEWLINE]" />
                <Action Name="Set Indicator Colour" Code="IndSetColour((INDICATOR *)GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]),COLOUR);[NEWLINE]" />
                <Action Name="Update Indicator" Code="GFX_GOL_ObjectStateSet(GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]), IND_DRAW);[NEWLINE]" />
                <Action Name="Hide Indicator" Code="GFX_GOL_ObjectStateSet(GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]), IND_HIDE);[NEWLINE]" />
                <Action Name="Show Indicator" Code="GFX_GOL_ObjectStateSet(GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]), IND_DRAW);[NEWLINE]" />
            </Actions>
        </Indicator>
        <Disp7Seg>
            <GOL>Yes</GOL>
            <GraphicsConfig>
                <![CDATA[
USE_DISP7SEG
]]>
            </GraphicsConfig>
            <Project>
                <Folder Name="Header Files/appMLA/system_config/[ACTIVECONFIG]/vgdd">
                    <AddVGDDFile DestFile="disp7seg.h">Disp7SegMLA.h</AddVGDDFile>
                    <AddVGDDFile DestFile="fontled7seg.h">FontLed7SegMLA.h</AddVGDDFile>
                </Folder>
                <Folder Name="Source Files/appMLA/system_config/[ACTIVECONFIG]/vgdd">
                    <AddVGDDFile DestFile="disp7seg.c">Disp7SegMLA.c</AddVGDDFile>
                    <AddVGDDFile DestFile="fontled7seg.c">FontLed7SegMLA.c</AddVGDDFile>
                    <AddFile>$MAL/framework/gfx/src/gfx_gol.c</AddFile>
                    <AddFile>$MAL/framework/gfx/src/gfx_primitive.c</AddFile>
                </Folder>
            </Project>
            <Header>
                <![CDATA[
#define ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]   [NEXT_NUMID]
]]>
            </Header>
            <HeadersIncludes>
                <![CDATA[
#include "disp7seg.h"
]]>
            </HeadersIncludes>
            <CodeHeadComment>
            </CodeHeadComment>
            <CodeHead>
            </CodeHead>
            <Constructor>
                <![CDATA[
DISP7SEG *p[CONTROLID_NOINDEX][CONTROLID_INDEX];
]]>
            </Constructor>
            <Code>
                <![CDATA[
    p[CONTROLID_NOINDEX][CONTROLID_INDEX] = D7Create(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX],[LEFT],[TOP],[RIGHT],[BOTTOM],[STATE],[VALUE],[NUMDIGITS],[DOTPOS],[THICKNESS],(GFX_GOL_OBJ_SCHEME *)&GOLScheme_[SCHEME]);
]]>
            </Code>
            <State>
                <Enabled True="D7_DRAW" False="D7_DRAW|D7_DISABLED" />
                <Hidden False="D7_DRAW" True="D7_HIDE" />
                <Frame Enabled="D7_FRAME" Disabled="D7_DRAW" />
                <Style FontLed7SegBar="D7_DRAW" FontLed7SegPoly="D7_DRAWPOLY" />
            </State>
            <Events>
                <Event Name="D7_MSG_TOUCHED" Description="Disp7Seg has been touched" />
            </Events>
            <Actions>
                <Action Name="Use Widget ID" Code="ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]" />
                <Action Name="Set Disp7Seg Value" Code="D7SetVal((DISP7SEG *)GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]),VALUE);[NEWLINE]" />
                <Action Name="Increment Disp7Seg Value" Code="D7IncVal((DISP7SEG *)GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]), deltaValue);[NEWLINE]" />
                <Action Name="Decrement Disp7Seg Value" Code="D7DecVal((DISP7SEG *)GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]), deltaValue);[NEWLINE]" />
                <Action Name="Update Disp7Seg" Code="GFX_GOL_ObjectStateSet(GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]), D7_DRAW);[NEWLINE]" />
                <Action Name="Hide Disp7Seg" Code="GFX_GOL_ObjectStateSet(GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]), D7_HIDE);[NEWLINE]" />
                <Action Name="Show Disp7Seg" Code="GFX_GOL_ObjectStateSet(GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]), D7_DRAW);[NEWLINE]" />
            </Actions>
        </Disp7Seg>
        <VuMeter>
            <GOL>Yes</GOL>
            <Project>
                <Folder Name="Header Files/appMLA/system_config/[ACTIVECONFIG]/vgdd">
                    <AddVGDDFile DestFile="vumeter.h">VuMeterMLA.h</AddVGDDFile>
                </Folder>
                <Folder Name="Source Files/appMLA/system_config/[ACTIVECONFIG]/vgdd">
                    <AddVGDDFile DestFile="vumeter.c">VuMeterMLA.c</AddVGDDFile>
                    <AddFile>$MAL/framework/gfx/src/gfx_gol.c</AddFile>
                    <AddFile>$MAL/framework/gfx/src/gfx_primitive.c</AddFile>
                </Folder>
            </Project>
            <Header>
                <![CDATA[
#define ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]   [NEXT_NUMID]
]]>
            </Header>
            <HeadersIncludes>
                <![CDATA[
#include "vumeter.h"
]]>
            </HeadersIncludes>
            <CodeHeadComment>
            </CodeHeadComment>
            <CodeHead>
            </CodeHead>
            <Constructor>
                <![CDATA[
VUMETER *p[CONTROLID_NOINDEX][CONTROLID_INDEX];
]]>
            </Constructor>
            <Code>
                <![CDATA[
    [BITMAP_POINTER_INIT]
    p[CONTROLID_NOINDEX][CONTROLID_INDEX] = VuCreate(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX],[LEFT],[TOP],[RIGHT],[BOTTOM]
        ,[STATE] // State
        ,[PARAMETERS] // VuMeter Parameters
        ,[BITMAP] // Bitmap
        ,(GFX_GOL_OBJ_SCHEME *)&GOLScheme_[SCHEME]);
]]>
            </Code>
            <ScreenCode Event="SCREEN_DISPLAY">
                <![CDATA[
// This code ensures VuMeter [CONTROLID_NOINDEX][CONTROLID_INDEX] gets animated across GolDraw() calls
if(GFX_GOL_ObjectStateGet(p[CONTROLID_NOINDEX][CONTROLID_INDEX], VU_DRAW_ANIMATING)) {
	GFX_GOL_ObjectStateSet(p[CONTROLID_NOINDEX][CONTROLID_INDEX], VU_DRAW_UPDATE);
}
	]]>
            </ScreenCode>
            <State>
                <Enabled True="VU_DRAWALL" False="VU_DRAWALL|VU_DISABLED" />
                <Hidden False="VU_DRAWALL" True="VU_HIDE" />
                <Frame Enabled="VU_FRAME" Disabled="VU_DRAWALL" />
                <PointerLine NORMAL_LINE="VU_DRAWALL" THICK_LINE="VU_POINTER_THICK" />
            </State>
            <Events>
                <Event Name="VU_MSG_TOUCHSCREEN" Description="VuMeter has been touched" />
            </Events>
            <Actions>
                <Action Name="Use Widget ID" Code="ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]" />
                <Action Name="Set VuMeter Value" Code="VuSetVal((VUMETER *)GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]),VALUE);[NEWLINE]" />
                <Action Name="Redraw all VuMeter" Code="GFX_GOL_ObjectStateSet(GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]), VU_DRAWALL);[NEWLINE]" />
                <Action Name="Update VuMeter Pointer" Code="GFX_GOL_ObjectStateSet(GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]), VU_DRAW_UPDATE);[NEWLINE]" />
                <Action Name="Hide VuMeter" Code="GFX_GOL_ObjectStateSet(GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]), VU_HIDE);[NEWLINE]" />
            </Actions>
        </VuMeter>
        <BarGraph>
            <GOL>Yes</GOL>
            <Project>
                <Folder Name="Header Files/appMLA/system_config/[ACTIVECONFIG]/vgdd">
                    <AddVGDDFile DestFile="bargraph.h">BarGraphMLA.h</AddVGDDFile>
                </Folder>
                <Folder Name="Source Files/appMLA/system_config/[ACTIVECONFIG]/vgdd">
                    <AddVGDDFile DestFile="bargraph.c">BarGraphMLA.c</AddVGDDFile>
                    <AddFile>$MAL/framework/gfx/src/gfx_gol.c</AddFile>
                    <AddFile>$MAL/framework/gfx/src/gfx_primitive.c</AddFile>
                </Folder>
            </Project>
            <Header>
                <![CDATA[
#define ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]   [NEXT_NUMID]
extern BgSegment Segments[CONTROLID_NOINDEX][CONTROLID_INDEX][];
]]>
            </Header>
            <HeadersIncludes>
                <![CDATA[
#include "bargraph.h"
]]>
            </HeadersIncludes>
            <CodeHeadComment>
            </CodeHeadComment>
            <CodeHead>
            </CodeHead>
            <Constructor>
                <![CDATA[
BgSegment Segments[CONTROLID_NOINDEX][CONTROLID_INDEX][] = {[SEGMENTSARRAY]};
BARGRAPH *p[CONTROLID_NOINDEX][CONTROLID_INDEX];
]]>
            </Constructor>
            <Code>
                <![CDATA[
    p[CONTROLID_NOINDEX][CONTROLID_INDEX] = BgCreate(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX],[LEFT],[TOP],[RIGHT],[BOTTOM]
        ,[STATE] // State
        ,[SEGMENTSCOUNT] // Segments Count
        ,(void *)&Segments[CONTROLID_NOINDEX][CONTROLID_INDEX]	// pSegments
        ,[PARAMETERS] // BarGraph Parameters
        ,(GFX_GOL_OBJ_SCHEME *)&GOLScheme_[SCHEME]);
]]>
            </Code>
            <ScreenCode Event="SCREEN_DISPLAY">
                <![CDATA[
// This code ensures BarGraph [CONTROLID_NOINDEX][CONTROLID_INDEX] gets animated across GolDraw() calls
if(GFX_GOL_ObjectStateGet(p[CONTROLID_NOINDEX][CONTROLID_INDEX], BG_DRAW_ANIMATING)) {
	GFX_GOL_ObjectStateSet(p[CONTROLID_NOINDEX][CONTROLID_INDEX], BG_DRAW_UPDATE);
}
	]]>
            </ScreenCode>
            <State>
                <Enabled True="BG_DRAWALL" False="BG_DRAWALL|BG_DISABLED" />
                <Hidden False="BG_DRAWALL" True="BG_HIDE" />
                <Frame Enabled="BG_FRAME" Disabled="BG_DRAWALL" />
                <Orientation Horizontal="" Vertical="BG_VERTICAL" />
            </State>
            <Events>
                <Event Name="BG_MSG_TOUCHSCREEN" Description="BarGraph has been touched" />
            </Events>
            <Actions>
                <Action Name="Use Widget ID" Code="ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]" />
                <Action Name="Set BarGraph Value" Code="BgSetVal((BARGRAPH *)GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]),VALUE);[NEWLINE]" />
                <Action Name="Redraw all BarGraph" Code="GFX_GOL_ObjectStateSet(GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]), BG_DRAWALL);[NEWLINE]" />
                <Action Name="Update BarGraph Pointer" Code="GFX_GOL_ObjectStateSet(GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]), BG_DRAW_UPDATE);[NEWLINE]" />
                <Action Name="Hide BarGraph" Code="GFX_GOL_ObjectStateSet(GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]), BG_HIDE);[NEWLINE]" />
            </Actions>
        </BarGraph>
        <MsgBox>
            <GOL>Yes</GOL>
            <Project>
                <Folder Name="Header Files/appMLA/system_config/[ACTIVECONFIG]/vgdd">
                    <AddVGDDFile DestFile="msgbox.h">MsgBoxMLA.h</AddVGDDFile>
                </Folder>
                <Folder Name="Source Files/appMLA/system_config/[ACTIVECONFIG]/vgdd">
                    <AddVGDDFile DestFile="msgbox.c">MsgBoxMLA.c</AddVGDDFile>
                    <AddFile>$MAL/framework/gfx/src/gfx_gol.c</AddFile>
                    <AddFile>$MAL/framework/gfx/src/gfx_primitive.c</AddFile>
                </Folder>
            </Project>
            <Header>
                <![CDATA[
#define ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]   [NEXT_NUMID]
]]>
            </Header>
            <HeadersIncludes>
                <![CDATA[
#include "msgbox.h"
]]>
            </HeadersIncludes>
            <CodeHeadComment>
            </CodeHeadComment>
            <CodeHead>
            </CodeHead>
            <Constructor>
                <![CDATA[
MSGBOX *p[CONTROLID_NOINDEX][CONTROLID_INDEX];
]]>
            </Constructor>
            <Code>
                <![CDATA[
    p[CONTROLID_NOINDEX][CONTROLID_INDEX] = MsgBoxCreate(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX],[LEFT],[TOP],[RIGHT],[BOTTOM]
        ,[RADIUS] // Radius
        ,[BUTTONSTODISPLAY] // Buttons to display
        ,(GFX_XCHAR*)[WIDGETTEXT] // Main message
        ,(GFX_XCHAR*)[CAPTIONTEXT] // Caption message
        ,[STATE] // State
        ,[BITMAP] // Bitmap for main message
        ,[CAPTIONBITMAP] // Bitmap for the caption
        ,(GFX_GOL_OBJ_SCHEME *)&GOLScheme_[SCHEME] // GOL Scheme for MsgBox body
        ,(GFX_GOL_OBJ_SCHEME *)&GOLScheme_[BUTTONS_SCHEME] // GOL Scheme for the buttons
        ,[RELEASEDKEY_BITMAP] // Bitmap for the released key
        ,[PRESSEDKEY_BITMAP] // Bitmap for the pressed key
        );
]]>
            </Code>
            <State>
                <Hidden False="MSGBOX_DRAW" True="MSGBOX_HIDE" />
                <HorizAlign Left="MSGBOX_TEXTLEFT" Right="MSGBOX_TEXTRIGHT" Center="MSGBOX_DRAW" />
                <VertAlign Top="MSGBOX_TEXTTOP" Bottom="MSGBOX_TEXTBOTTOM" Center="MSGBOX_DRAW" />
            </State>
            <Events>
                <Event Name="MSGBOX_TOUCHSCREEN" Description="MessageBox has been touched" />
                <Event Name="MSGBOX_MSG_OK_YES" Description="User touched the OK/YES button" />
                <Event Name="MSGBOX_MSG_NO" Description="User touched the NO button" />
                <Event Name="MSGBOX_MSG_CANCEL" Description="User touched the CANCEL button" />
            </Events>
            <Actions>
                <Action Name="Use Widget ID" Code="ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]" />
                <Action Name="Set MsgBox Main text" Code="MsgBoxSetText((MSGBOX *)GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]),VALUE);[NEWLINE]" />
                <Action Name="Redraw MsgBox" Code="GFX_GOL_ObjectStateSet(GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]), MSGBOX_DRAW);[NEWLINE]" />
                <Action Name="Hide MsgBox" Code="GFX_GOL_ObjectStateSet(GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]), MSGBOX_HIDE);[NEWLINE]" />
            </Actions>
        </MsgBox>
        <TextEntryEx>
            <GOL>Yes</GOL>
            <Project>
                <Folder Name="Header Files/appMLA/system_config/[ACTIVECONFIG]/vgdd">
                    <AddVGDDFile DestFile="textentryex.h">TextEntryExMLA.h</AddVGDDFile>
                </Folder>
                <Folder Name="Source Files/appMLA/system_config/[ACTIVECONFIG]/vgdd">
                    <AddVGDDFile DestFile="textentryex.c">TextEntryExMLA.c</AddVGDDFile>
                    <AddFile>$MAL/framework/gfx/src/gfx_gol.c</AddFile>
                    <AddFile>$MAL/framework/gfx/src/gfx_primitive.c</AddFile>
                </Folder>
            </Project>
            <Header>
                <![CDATA[
#define ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]   [NEXT_NUMID]
]]>
            </Header>
            <HeadersIncludes>
                <![CDATA[
#include "textentryex.h"
]]>
            </HeadersIncludes>
            <CodeHeadComment>
            </CodeHeadComment>
            <CodeHead>
                <![CDATA[
GFX_XCHAR *[CONTROLID_NOINDEX][CONTROLID_INDEX]_KEYS[]={[KEYS]};
GFX_XCHAR *[CONTROLID_NOINDEX][CONTROLID_INDEX]_KEYSALTERNATE[]={[KEYSALTERNATE]};
GFX_XCHAR *[CONTROLID_NOINDEX][CONTROLID_INDEX]_KEYSSHIFT[]={[KEYSSHIFT]};
GFX_XCHAR *[CONTROLID_NOINDEX][CONTROLID_INDEX]_KEYSSHIFTALTERNATE[]={[KEYSSHIFTALTERNATE]};
]]>
            </CodeHead>
            <Constructor>
                <![CDATA[
TEXTENTRYEX *p[CONTROLID_NOINDEX][CONTROLID_INDEX];
]]>
            </Constructor>
            <Code>
                <![CDATA[
    p[CONTROLID] = TeExCreate(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX],[LEFT],[TOP],[RIGHT],[BOTTOM]
        ,[STATE] // Initial state for the Widget
        ,[CONTROLID_NOINDEX][CONTROLID_INDEX]_KEYS // Array of key texts
        ,[CONTROLID_NOINDEX][CONTROLID_INDEX]_KEYSALTERNATE // Array of alternate key texts
        ,[CONTROLID_NOINDEX][CONTROLID_INDEX]_KEYSSHIFT // Array of shift key texts
        ,[CONTROLID_NOINDEX][CONTROLID_INDEX]_KEYSSHIFTALTERNATE // Array of shift key texts
        ,(int16_t[])[COMMANDKEYS] // Command key indexes
        ,(GFX_XCHAR*)[CONTROLID]_Text // Buffer of typed text
        ,[BITMAPPRESSED] // Bitmap for pressed key
        ,[BITMAPRELEASED] // Bitmap for released key
        ,(void *)&[DISPFONT] // Font for displaying typed text
        ,[PARAMETERS] // TextEntryEx Parameters
        ,(GFX_GOL_OBJ_SCHEME *)&GOLScheme_[SCHEME] // Scheme
    );
]]>
            </Code>
            <!--<CodeSub1>
			  TeExSetKeyCommand(p[CONTROLID],[KEYIDX],[KEYCOMMAND]);
			</CodeSub1>-->
            <ScreenCode>
            </ScreenCode>
            <State>
                <Enabled True="TEEX_DRAW" False="TEEX_DRAW|TEEX_DISABLED" />
                <Hidden False="TEEX_DRAW" True="TEEX_HIDE" />
                <Frame Enabled="TEEX_FRAME" Disabled="TEEX_DRAW" />
                <KeysLayout Gruid="TEEX_DRAW" KeyboardLike="TEEX_LIKEKEYBOARD" />
            </State>
            <Events>
                <Event Name="TEEX_MSG_PRESSED" Description="A key has been pressed" />
                <Event Name="TEEX_MSG_RELEASED" Description="A key has been released" />
                <Event Name="TEEX_MSG_ENTER" Description="Enter (OK) key has been touched" />
                <Event Name="TEEX_MSG_ADD_CHAR" Description="A character has been added" />
                <Event Name="TEEX_MSG_SHIFT" Description="Shift key has been touched" />
                <Event Name="TEEX_MSG_BKSP" Description="Backspace key has been touched" />
                <Event Name="TEEX_MSG_SPACE" Description="Space key has been touched" />
                <Event Name="TEEX_MSG_ALTERNATE" Description="Alt (?123/abc) key has been touched" />
                <Event Name="TEEX_MSG_CAPSLOCK" Description="Shift key has been pressed for more than about 1 second" />
            </Events>
            <Actions>
                <Action Name="Use Widget ID" Code="ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]" />
                <Action Name="Hide TextEntryEx" Code="GFX_GOL_ObjectStateSet(GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]), TEEX_HIDE);[NEWLINE]" />
                <Action Name="Disable TextEntryEx" Code="GFX_GOL_ObjectStateSet(GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]), TEEX_DISABLED);[NEWLINE]" />
                <Action Name="Enable TextEntryEx" Code="GFX_GOL_ObjectStateGet(GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]), TEEX_DISABLED);[NEWLINE]" />
                <Action Name="Redraw edited Text" Code="GFX_GOL_ObjectStateSet(GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]), TEEX_UPDATE_TEXT);[NEWLINE]" />
                <Action Name="Show/Update TextEntryEx" Code="GFX_GOL_ObjectStateSet(GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]), TEEX_DRAW);[NEWLINE]" />
                <Action Name="Clear Text Buffer"
                        Code="TeExClearBuffer((TEXTENTRYEX *)GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]));[NEWLINE]"
                        Help="This function will clear the data in the display. You must set the drawing state bit TEEX_UPDATE_TEXT to update the TEXTENTRYEX on the screen"/>
                <Action Name="Use Text Buffer"
                        Code="GFX_XCHAR *pText;
pText = TeExGetBuffer((TEXTENTRYEX *)GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]));[NEWLINE]"
                        Help="Returns a pointer to the buffer used"/>
                <Action Name="Set TextEntryEx Text"
                        Code="TeExSetBuffer((TEXTENTRYEX *)GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]), (GFX_XCHAR *)$Quoted string constant or variable:|&quot;New text&quot;$, (int16_t) MaxSize);[NEWLINE]"
                        Help="This function sets the buffer used to display text. If the buffer is initialized with a string, the string must be a null terminated
string. If the string length is greater than MaxSize, string will be truncated to MaxSize. pText must point to a valid memory
location with size equal to MaxSize+1. The +1 is used for the string terminator"/>
            </Actions>
        </TextEntryEx>
        <StaticTextEx>
            <GOL>Yes</GOL>
            <Project>
                <Folder Name="Header Files/appMLA/system_config/[ACTIVECONFIG]/vgdd">
                    <AddVGDDFile DestFile="statictext_ex.h">StaticTextExMLA.h</AddVGDDFile>
                </Folder>
                <Folder Name="Source Files/appMLA/system_config/[ACTIVECONFIG]/vgdd">
                    <AddVGDDFile DestFile="statictext_ex.c">StaticTextExMLA.c</AddVGDDFile>
                    <AddFile>$MAL/framework/gfx/src/gfx_gol.c</AddFile>
                    <AddFile>$MAL/framework/gfx/src/gfx_primitive.c</AddFile>
                </Folder>
            </Project>
            <Header>
                <![CDATA[
#define ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]   [NEXT_NUMID]
]]>
            </Header>
            <HeadersIncludes>
                <![CDATA[
#include "statictext_ex.h"
]]>
            </HeadersIncludes>
            <Constructor>
                <![CDATA[
    STATICTEXTEX *p[CONTROLID_NOINDEX][CONTROLID_INDEX];
]]>
            </Constructor>
            <Code>
                <![CDATA[
    p[CONTROLID_NOINDEX][CONTROLID_INDEX] = StExCreate(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX],[LEFT],[TOP],[RIGHT],[BOTTOM],[STATE],(GFX_XCHAR*)[WIDGETTEXT],(GFX_GOL_OBJ_SCHEME *)&GOLScheme_[SCHEME]);
]]>
            </Code>
            <State>
                <Enabled True="STEX_DRAW" False="STEX_DRAW|STEX_DISABLED" />
                <Hidden False="STEX_DRAW" True="STEX_HIDE" />
                <HorizAlign Left="STEX_DRAW" Right="STEX_RIGHT_ALIGN" Center="STEX_CENTER_ALIGN" />
                <Frame Enabled="STEX_FRAME" Disabled="STEX_DRAW" />
                <NoPanel Enabled="STEX_NOPANEL" Disabled="STEX_DRAW" />
            </State>
            <Events>
                <Event Name="STEX_MSG_SELECTED" Description="StaticTextEx selected" PlayerEvent="MOUSE_DOWN" />
            </Events>
            <Actions>
                <Action Name="Use Widget ID" Code="ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]" />
                <Action Name="Set StaticTextEx Text"
                                Code="StExSetText((STATICTEXTEX *)GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]), (GFX_XCHAR *) $Quoted string constant or variable:|&quot;New text&quot;$);[NEWLINE]"
                                Help="Sets the string that will be used for the object"/>
                <Action Name="Get StaticTextEx Text"
                                Code="GFX_XCHAR *pText;
	pText=((STATICTEXTEX *)(GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX])))->pText;[NEWLINE]"
                                Help="Returns the pointer to the text string used"/>
                <Action Name="Hide StaticTextEx" Code="GFX_GOL_ObjectStateSet(GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]), STEX_HIDE);[NEWLINE]" />
                <Action Name="Disable StaticTextEx" Code="GFX_GOL_ObjectStateSet(GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]), STEX_DISABLED);[NEWLINE]" />
                <Action Name="Enable StaticTextEx" Code="GFX_GOL_ObjectStateGet(GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]), STEX_DISABLED);[NEWLINE]" />
                <Action Name="Show/Update StaticTextEx" Code="GFX_GOL_ObjectStateSet(GFX_GOL_ObjectFind(ID_[CONTROLID_NOINDEX][CONTROLID_INDEX]), STEX_DRAW);[NEWLINE]" />
                <Action Name="Use Text Buffer name" Code="[CONTROLID_NOINDEX][CONTROLID_INDEX]_Text" />
            </Actions>
        </StaticTextEx>
    </ControlsTemplates>
    <StringsPoolTemplate>
        <WidgetsText>
            <NoTranslations>
                <Header>
                </Header>
                <Code>
                    <![CDATA[
[CONTROLID_NOINDEX]_Text[CONTROLID_INDEXPAR]
]]>                </Code>
            </NoTranslations>
            <Translations>
                <Header>
                    <![CDATA[
#define [CONTROLID_NOINDEX]_Text[CONTROLID_INDEXPAR] VGDDString([STRINGID])
]]>                </Header>
                <Code>
                    <![CDATA[
    [CONTROLID_NOINDEX]_Text[CONTROLID_INDEXPAR]
]]>                </Code>
            </Translations>
        </WidgetsText>
        <Header>
            <![CDATA[
#define STRINGSPOOL_SIZE [NUMSTRINGS]
#define LANGUAGES_SUPPORTED [NUMTRANSLATIONS]
extern const GFX_XCHAR *aVGDDStringsPool[STRINGSPOOL_SIZE][LANGUAGES_SUPPORTED];
extern uint8_t VGDDActiveLanguage;
GFX_XCHAR *VGDDString(int StringID);
]]>        </Header>
        <StringsTemplate>
            <![CDATA[
[TAB]// VGDDString([STRINGID]) [INUSE]: [QTEXT][NEWLINE]
[TAB]{ [TRANSLATIONS]
[TAB]}[COMMA][NEWLINE]
]]>        </StringsTemplate>
        <TranslationsTemplate>
            <NoMultiChar>
                <![CDATA[
[INDENT](GFX_XCHAR *)[STRING][COMMA][NEWLINE]
]]>
            </NoMultiChar>
            <MultiChar>
                <![CDATA[
[INDENT](GFX_XCHAR [[STRINGLEN+1]]) [STRING][COMMA] //[QTEXT][NEWLINE]
]]>
            </MultiChar>
        </TranslationsTemplate>
        <StringsPoolHeaderDefine>
            <![CDATA[            
STRING_[REFSTRING]
]]>
        </StringsPoolHeaderDefine>
        <StringsPoolHeader>
            <![CDATA[            
// StringsPool.h - DO NOT EDIT THIS FILE
[STRINGSPOOLDEFINES]
]]>
        </StringsPoolHeader>
        <Code>
            <![CDATA[
// StringsPool.c - DO NOT EDIT THIS FILE
		
#include <gfx.h> // For GFX_XCHAR definition
#include "vgdd_[PROJECT_NAME]_screens.h"

uint8_t VGDDActiveLanguage=0;

const GFX_XCHAR *aVGDDStringsPool[STRINGSPOOL_SIZE][LANGUAGES_SUPPORTED] = {
[STRINGSPOOL]
};

// -------------------------------------------------------------------------------------
// Function VGDDString
// -------------------------------------------------------------------------------------
// This is the main StringsPool handler. 
// Call it by passing the StringID and it returns the pointer 
// to the translated string, according to current language settings (VGDDActiveLanguage)
// If a translation is not available, it returns the Reference string
// -------------------------------------------------------------------------------------

GFX_XCHAR *VGDDString(int StringID) {
	GFX_XCHAR *string;
    if(StringID==-1) return((GFX_XCHAR*)"");
	string = (GFX_XCHAR *) aVGDDStringsPool[StringID][VGDDActiveLanguage];
	if (string[0] == 0) {
		string = (GFX_XCHAR *) aVGDDStringsPool[StringID][0];
	}
	return (string);
}

// -------------------------------------------------------------------------------------
// Function FilteredFontTranslate
// -------------------------------------------------------------------------------------
// For strings that use a filtered font, this function translates an ASCII string to 
// the correct sequence of characters, according to the FilterTable definition
// Example:  FilteredFontTranslate("This is an ASCII String", BufTo, TahomaRegular68_FilterTable, sizeof(TahomaRegular68_FilterTable));

void FilteredFontTranslate(char *BufFrom, char *BufTo, const uint16_t *FilterTable, int FilterTableSize) {
	char c, i;
	while ((c = *BufFrom)) {
        *BufTo = 0x20;
		for (i = 0; i<FilterTableSize; i++) {
			if (*(FilterTable + i) == c) {
				*BufTo = i + 0x20;
				break;
			}
		}
		BufFrom++;
		BufTo++;
	}
	*BufTo = 0x00;
}
]]>
        </Code>
    </StringsPoolTemplate>
    <ClosingBlock>
        <Header>
            <![CDATA[
#define	VGDD_NUM_SCREENS	[VGDD_NUM_SCREENS] // Number of Screens in this VGDD project
#define	VGDD_LAST_ID	[VGDD_LAST_ID] // Last Widget ID used by VGDD - You can start from VGDD_LAST_ID+1 for extra-VGDD Widgets
#define SCREENSTATE_INIT [FIRST_SCREEN_IN_PROJECT]
#endif // ifndef _VGDD_SCREENS_H_
]]>        </Header>
        <Code>
            <![CDATA[
[EMPTYLINE]
// End of [PROJECTFILENAME_SCREENSC]
[EMPTYLINE]
]]>        </Code>
    </ClosingBlock>
</VGDDCodeTemplate>