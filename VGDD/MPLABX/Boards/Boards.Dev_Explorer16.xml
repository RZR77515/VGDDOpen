<?xml version="1.0" encoding="utf-8"?>
<Board ID="EXPLORER16"
       Description="Explorer 16 Development Board"
       Type="Development"
       Compiler="C30"
       Img="Dev_Explorer16.png"
       PartNumber="DM240001"
       URL="http://www.microchip.com/Developmenttools/ProductDetails.aspx?PartNO=DM240001"
       HasPIM="true">
    <Note>

    </Note>
    <CompatibleExpansionBoard ID="EXP_NONE" />
    <CompatibleExpansionBoard ID="GFX_SSD1926" />
    <CompatibleExpansionBoard ID="GFX_S1D13517" />
    <CompatibleExpansionBoard ID="LCC_BOARD" />
    <CompatibleExpansionBoard ID="TECHTOYS_SSD1963_EVK" />
    <CompatibleExpansionBoard ID="TECHTOYS_SSD1963_EVK_R3B" />
    <CompatibleExpansionBoard ID="EPD_PICTAIL" />
    <CompatibleExpansionBoard ID="PIM_PIC24FJ256GB410" />
    <CompatibleExpansionBoard ID="PIM_PIC24FJ128GA310" />
    <CompatibleDisplay ID="TRULY_3_2" />
    <CompatibleDisplay ID="POWERTIP_4_3" />
    <CompatibleDisplay ID="TRULY_7" />
    <CompatibleDisplay ID="DISPLAYTECH_EMB028TFTDEV" />
    <CompatibleDisplay ID="EPD_1.44_V110_G1" />
    <CompatibleDisplay ID="EPD_2_V110_G1" />
    <CompatibleDisplay ID="EPD_2.7_V110_G1" />
    <CompatibleDisplay ID="EPD_1.44_V230_G2" />
    <CompatibleDisplay ID="EPD_2_V230_G2" />
    <CompatibleDisplay ID="EPD_2.7_V230_G2" />
    <CompatibleOptions>
        <Option>chkRTCC</Option>
        <!--<Option>chkSPIeeprom</Option>-->
        <!--<Option>chkDEE</Option>-->
        <Option>chkSPIFlashSST26VF0xxB</Option>
    </CompatibleOptions>
    <CompatibleFrameworks Framework="MLALegacy" Compatible="Yes" />
    <CompatibleFrameworks Framework="MLA" Compatible="Yes" />
    <CompatibleFrameworks Framework="Harmony" Compatible="No" />
    <AddGroup Name="MCC" />
    <AddGroup Name="GOL" />
    <AddGroup Name="RTCC" />
    <AddGroup Name="PutImageFromSD" />
    <AddGroup Name="FlashProgrammer" />
    <AddGroup Name="USBhost" />
    <AddGroup Name="SPIFlash" />
    <AddGroup Name="SPIeeprom" />
    <AddGroup Name="DEEEmulation" />
    <AddGroup Name="SPIFlashSST26VF0xxB" />
    <Project>
        <MLALegacy>
            <Folder Name="Source Files/Common">
                <AddFile>$MAL/Common/TimeDelay.c</AddFile>
            </Folder>
            <Folder Name="Header Files/Board Support Package">
                <AddFile>$MAL/../Board Support Package/Potentiometer.h</AddFile>
            </Folder>
            <SetConfig Section="C30" key="code-model" value="large-code"/>
            <!--<SetConfig Section="C30" key="const-model" value="const-in-code"/>
        <SetConfig Section="C30" key="data-model" value="large-data"/>
        <SetConfig Section="C30" key="scalar-model" value="large-scalar"/>-->
            <SetConfig Section="[COMPILER]-LD" key="heap-size" value="[HEAPSIZE]"/>
        </MLALegacy>
        <MLA>
            <SetConfig Section="C30" key="code-model" value="large-code"/>
            <SetConfig Section="C30" key="const-model" value="const-in-code"/>
            <SetConfig Section="C30" key="data-model" value="large-data"/>
            <SetConfig Section="C30" key="scalar-model" value="large-scalar"/>
            <SetConfig Section="[COMPILER]-LD" key="heap-size" value="[HEAPSIZE]"/>
        </MLA>
    </Project>
    <Code>
        <Section Name="HardwareProfileHead">
            <![CDATA[
#define EXPLORER_16
]]>
        </Section>
        <Section Name="HardwareProfile">
            <![CDATA[

// --------------------------------------------------------------------
// Timing Controllers (TCON) used by some displays 
// --------------------------------------------------------------------
#if defined (GFX_USE_DISPLAY_PANEL_TFT_G240320LTSW_118W_E) || defined (GFX_USE_DISPLAY_PANEL_35QVW0T)
    #define TCON_CS_LAT      LATAbits.LATA0   //_RA0        
    #define TCON_CS_TRIS     TRISAbits.TRISA0 //_TRISA0        
    #define TCON_CS_DIG()
        
    #define TCON_SCL_LAT     LATDbits.LATD8   //_RD8        
    #define TCON_SCL_TRIS    TRISDbits.TRISD8 //_TRISD8        
    #define TCON_SCL_DIG()
        
    #define TCON_SDO_LAT     LATBbits.LATB1   //_RB1        
    #define TCON_SDO_TRIS    TRISBbits.TRISB1 //_TRISB1        
    #define TCON_SDO_DIG()   _ANSB1 = 0;
        
    #define TCON_DC_LAT      LATBbits.LATB0   //_RB0        
    #define TCON_DC_TRIS     TRISBbits.TRISB0 //_TRISB0        
    #define TCON_DC_DIG()    _ANSB0 = 0;
#endif
    
#define MCHP25LC256_CS_TRIS  TRISDbits.TRISD12    
#define MCHP25LC256_CS_LAT   LATDbits.LATD12    

// -----------------------------------------------
// IOS FOR THE SWITCHES (SIDE BUTTONS)
// -----------------------------------------------
/*typedef enum
{
    HW_BUTTON_PRESS = 0,
    HW_BUTTON_RELEASE = 1
} HW_BUTTON_STATE;*/
#define HardwareButtonInit()
#define GetHWButtonProgram()        (PORTDbits.RD7)
#define GetHWButtonScanDown()       (PORTDbits.RD13)
#define GetHWButtonScanUp()         (PORTAbits.RA7)  
#define GetHWButtonCR()             (PORTDbits.RD6)
#define GetHWButtonFocus()          (PORTDbits.RD7)

// --------------------------------------------------------------------
// * IOS FOR THE UART
// --------------------------------------------------------------------
#define TX_TRIS TRISFbits.TRISF3
#define RX_TRIS TRISDbits.TRISD0
]]>
        </Section>
        <MLALegacy>
            <!--<Section Name="ConfigBits">
<![CDATA[
// Configuration bits
#if defined(__dsPIC33F__) || defined(__PIC24H__)
_FOSCSEL(FNOSC_PRI);
_FOSC(FCKSM_CSECMD &OSCIOFNC_OFF &POSCMD_XT);
_FWDT(FWDTEN_OFF);
#elif defined(__dsPIC33E__) || defined(__PIC24E__)
_FOSCSEL(FNOSC_FRC);            
_FOSC(FCKSM_CSECMD & POSCMD_XT & OSCIOFNC_OFF & IOL1WAY_OFF);
_FWDT(FWDTEN_OFF);
_FPOR(FPWRT_PWR128 & BOREN_ON & ALTI2C1_ON & ALTI2C2_ON);
_FICD(ICS_PGD1 & RSTPRI_PF & JTAGEN_OFF);
#elif defined(__PIC32MX__)
    #pragma config FPLLODIV = DIV_1, FPLLMUL = MUL_20, FPLLIDIV = DIV_2, FWDTEN = OFF, FCKSM = CSECME, FPBDIV = DIV_1
    #pragma config OSCIOFNC = ON, POSCMOD = XT, FNOSC = PRIPLL
    #pragma config CP = OFF, BWP = OFF, PWP = OFF
#else
    #if defined(__PIC24FJ256GB110__)
_CONFIG1(JTAGEN_OFF & GCP_OFF & GWRP_OFF & FWDTEN_OFF & ICS_PGx2)
_CONFIG2(0xF7FF & IESO_OFF & FCKSM_CSDCMD & OSCIOFNC_OFF & POSCMOD_HS & FNOSC_PRIPLL & PLLDIV_DIV2 & IOL1WAY_OFF)
    #endif
    #if defined(__PIC24FJ256GA110__)
_CONFIG1(JTAGEN_OFF & GCP_OFF & GWRP_OFF & FWDTEN_OFF & ICS_PGx2)
_CONFIG2(IESO_OFF & FCKSM_CSDCMD & OSCIOFNC_OFF & POSCMOD_HS & FNOSC_PRIPLL & IOL1WAY_OFF)
    #endif
    #if defined(__PIC24FJ128GA010__)
_CONFIG2(FNOSC_PRIPLL & POSCMOD_XT) // Primary XT OSC with PLL
_CONFIG1(JTAGEN_OFF & FWDTEN_OFF)   // JTAG off, watchdog timer off
    #endif
    #if defined (__PIC24FJ256GB210__)
_CONFIG1( WDTPS_PS32768 & FWPSA_PR128 & ALTVREF_ALTVREDIS & WINDIS_OFF & FWDTEN_OFF & ICS_PGx2 & GWRP_OFF & GCP_OFF & JTAGEN_OFF) 
_CONFIG2( POSCMOD_HS & IOL1WAY_OFF & OSCIOFNC_OFF & OSCIOFNC_OFF & FCKSM_CSDCMD & FNOSC_PRIPLL & PLL96MHZ_ON & PLLDIV_DIV2 & IESO_OFF)
_CONFIG3( WPFP_WPFP255 & SOSCSEL_SOSC & WUTSEL_LEG & WPDIS_WPDIS & WPCFG_WPCFGDIS & WPEND_WPENDMEM) 
    #endif
    #if defined (__PIC24FJ256DA210__)
// CONFIG3
#pragma config WPFP = WPFP255           // Write Protection Flash Page Segment Boundary (Highest Page (same as page 170))
#pragma config SOSCSEL = SOSC           // Secondary Oscillator Power Mode Select (Secondary oscillator is in Default (high drive strength) Oscillator mode)
#pragma config WUTSEL = LEG             // Voltage Regulator Wake-up Time Select (Default regulator start-up time is used)
#pragma config ALTPMP = ALTPMPEN        // Alternate PMP Pin Mapping (EPMP pins are in alternate location mode)
#pragma config WPDIS = WPDIS            // Segment Write Protection Disable (Segmented code protection is disabled)
#pragma config WPCFG = WPCFGDIS         // Write Protect Configuration Page Select (Last page (at the top of program memory) and Flash Configuration Words are not write-protected)
#pragma config WPEND = WPENDMEM         // Segment Write Protection End Page Select (Protected code segment upper boundary is at the last page of program memory; the lower boundary is the code page specified by WPFP)

// CONFIG2
#pragma config POSCMOD = XT             // Primary Oscillator Select (XT Oscillator mode is selected)
#pragma config IOL1WAY = OFF            // IOLOCK One-Way Set Enable (The IOLOCK bit can be set and cleared as needed, provided the unlock sequence has been completed)
#pragma config OSCIOFNC = OFF           // OSCO Pin Configuration (OSCO/CLKO/RC15 functions as CLKO (FOSC/2))
#pragma config FCKSM = CSDCMD           // Clock Switching and Fail-Safe Clock Monitor (Clock switching and Fail-Safe Clock Monitor are disabled)
#pragma config FNOSC = PRIPLL           // Initial Oscillator Select (Primary Oscillator with PLL module (XTPLL, HSPLL, ECPLL))
#pragma config PLL96MHZ = ON            // 96MHz PLL Startup Select (96 MHz PLL is enabled automatically on start-up)
#pragma config PLLDIV = DIV2            // 96 MHz PLL Prescaler Select (Oscillator input is divided by 2 (8 MHz input))
#pragma config IESO = OFF               // Internal External Switchover (IESO mode (Two-Speed Start-up) is disabled)

// CONFIG1
#pragma config WDTPS = PS32768          // Watchdog Timer Postscaler (1:32,768)
#pragma config FWPSA = PR128            // WDT Prescaler (Prescaler ratio of 1:128)
#pragma config ALTVREF = ALTVREDIS      // Alternate VREF location Enable (VREF is on a default pin (VREF+ on RA9 and VREF- on RA10))
#pragma config WINDIS = OFF             // Windowed WDT (Standard Watchdog Timer enabled,(Windowed-mode is disabled))
#pragma config FWDTEN = OFF             // Watchdog Timer (Watchdog Timer is disabled)
#pragma config ICS = PGx2               // Emulator Pin Placement Select bits (Emulator functions are shared with PGEC2/PGED2)
#pragma config GWRP = OFF               // General Segment Write Protect (Writes to program memory are allowed)
#pragma config GCP = OFF                // General Segment Code Protect (Code protection is disabled)
#pragma config JTAGEN = OFF             // JTAG Port Enable (JTAG port is disabled)
#endif    
#endif
]]>
            </Section>-->
            <Section Name="HardwareProfile">
<![CDATA[
#include "Potentiometer.h"
#if defined(__PIC32MX)
    #define GetSystemClock()        (80000000ul)
    #define GetPeripheralClock()    (GetSystemClock() / (1 << OSCCONbits.PBDIV))
    #define GetInstructionClock()   (GetSystemClock())
#else
    #if defined(__PIC24F__)
        #define GetSystemClock()    (32000000ul)
    #elif defined(__dsPIC33F__) || defined(__PIC24H__)
        #define GetSystemClock()    (80000000ul)
    #elif defined(__dsPIC33E__) || defined(__PIC24E__)
        #define GetSystemClock()    (120000000ul)
    #endif
    #define GetPeripheralClock()    (GetSystemClock() / 2)
    #define GetInstructionClock()   (GetSystemClock() / 2)
#endif
]]>
            </Section>
            <Section Name="InitializeBoard" Order="0">
<![CDATA[
    // --------------------------------------------------------------------
    // ADC Explorer 16 Development Board Errata (work around 2)
    // RB15 should be output
    // --------------------------------------------------------------------
    LATBbits.LATB15 = 0;
    TRISBbits.TRISB15 = 0;

#if defined(__dsPIC33F__) || defined(__PIC24H__) || defined(__dsPIC33E__) || defined(__PIC24E__)
    // Configure Oscillator to operate the device at 40Mhz
    // Fosc= Fin*M/(N1*N2), Fcy=Fosc/2
    #if defined(__dsPIC33E__) || defined(__PIC24E__)
        //Fosc = 8M * 60/(2*2) = 120MHz for 8M input clock
        PLLFBD = 58; // M=60
    #else
        // Fosc= 8M*40(2*2)=80Mhz for 8M input clock
        PLLFBD = 38; // M=40
    #endif
    CLKDIVbits.PLLPOST = 0; // N1=2
    CLKDIVbits.PLLPRE = 0; // N2=2
    OSCTUN = 0; // Tune FRC oscillator, if FRC is used
    RCONbits.SWDTEN = 0; // Disable Watch Dog Timer

    // Clock switching to incorporate PLL
    __builtin_write_OSCCONH(0x03); // Initiate Clock Switch to Primary
    // Oscillator with PLL (NOSC=0b011)
    __builtin_write_OSCCONL(0x01); // Start clock switching
    while (OSCCONbits.COSC != 0b011);

    // Wait for Clock switch to occur
    // Wait for PLL to lock
    while (OSCCONbits.LOCK != 1);
    #if defined(__dsPIC33F__) || defined(__PIC24H__)
        // Set PMD0 pin functionality to digital
        AD1PCFGL = AD1PCFGL | 0x1000;
        #if defined(__dsPIC33FJ128GP804__) || defined(__PIC24HJ128GP504__)
            AD1PCFGLbits.PCFG6 = 1;
            AD1PCFGLbits.PCFG7 = 1;
            AD1PCFGLbits.PCFG8 = 1;
        #endif
    #elif defined(__dsPIC33E__) || defined(__PIC24E__)
        ANSELE = 0x00;
        ANSELDbits.ANSD6 = 0;

        // Set all touch screen related pins to Analog mode.
        ANSELBbits.ANSB11 = 1;
        #if defined(__dsPIC33EP512MU810__) || defined (__PIC24EP512GU810__)
            ANSELA = 0x0000;
            ANSELB = 0x0000;
            ANSELC = 0x0000;
            ANSELD = 0x0000;
            ANSELE = 0x0000;
            ANSELG = 0x0000; // This is mandatory. Set PORTG to digital to make SPI2 work

            // The dsPIC33EP512MU810 features Peripheral Pin select. The following statements map UART2 to
            // device pins which would connect to the the RX232 transciever on the Explorer 16 board.
            RPINR19 = 0;
            RPINR19 = 0x64;
            RPOR9bits.RP101R = 0x3;
        #endif
    #endif //defined(__dsPIC33F__) || defined(__PIC24H__)
#elif defined(__PIC24F__)
    //AD1PCFG = 0x0000FFFF;        // all ADC channel set to digital except the ADC pins for Resistive Touch Panel
#elif defined(__PIC32MX__)
    INTEnableSystemMultiVectoredInt();
    SYSTEMConfigPerformance(GetSystemClock());
#endif // #if defined(__dsPIC33F__) || defined(__PIC24H__) || defined(__dsPIC33E__) || defined(__PIC24E__)


    /************************************************************************
     * For Explorer 16 RD12 is connected to EEPROM chip select.
     * To prevent a conflict between this EEPROM and SST25 flash
     * the chip select of the EEPROM SPI should be pulled up.
     ************************************************************************/
    // Set IOs directions for EEPROM SPI
    MCHP25LC256_CS_LAT = 1; // set initial CS value to 1 (not asserted)
    MCHP25LC256_CS_TRIS = 0; // set CS pin to output
]]>
            </Section>
            <Section Name="InitializeBoard" Order="2">
<![CDATA[
    // Initialize graphics library and create default style scheme for GOL
    GOLInit();
]]>
            </Section>
            <Section Name="InitializeBoard" Order="9">
<![CDATA[
#if defined(USE_TOUCHSCREEN_RESISTIVE)
    // initialize the timer that manages the tick counter
    TickTouchInit();

    // initialize the components for Resistive Touch Screen
    TouchInit(NVMWrite, NVMRead, NVMSectorErase, NULL);
#endif
    HardwareButtonInit(); // Initialize the hardware buttons

]]>
            </Section>
        </MLALegacy>
        <MLA>
            <!--Configbits moved do PIMs-->
            <Section Name="HardwareProfile">
<![CDATA[
//#include "Potentiometer.h" TODO: Equivalent for MLA4
]]>
            </Section>
            <Section Name="SystemHead">
<![CDATA[
#if defined(__PIC24F__)
    #define SYS_CLK_FrequencySystemGet()    (32000000ul)
#elif defined(__dsPIC33F__) || defined(__PIC24H__)
    #define SYS_CLK_FrequencySystemGet()    (80000000ul)
#elif defined(__dsPIC33E__) || defined(__PIC24E__)
    #define SYS_CLK_FrequencySystemGet()    (120000000ul)
#endif
#define SYS_CLK_FrequencyPeripheralGet()    (SYS_CLK_FrequencySystemGet() / 2)
#define SYS_CLK_FrequencyInstructionGet()   (SYS_CLK_FrequencySystemGet() / 2)
#define FCY                                 (SYS_CLK_FrequencyInstructionGet())
]]>
            </Section>
            <Section Name="InitializeBoard" Order="1">
<![CDATA[
    // ---------------------------------------------------------
    // ADC Explorer 16 Development Board Errata (work around 2)
    // RB15 should be output
    // ---------------------------------------------------------
    LATBbits.LATB15 = 0;
    TRISBbits.TRISB15 = 0;
]]>
            </Section>
            <Section Name="InitializeBoard" Order="2">
<![CDATA[
    // ---------------------------------------------------------
    // Initialize the Display Driver
    // ---------------------------------------------------------
    DRV_GFX_Initialize();
]]>
            </Section>
            <Section Name="InitializeBoard" Order="9" Option="chkGOL">
<![CDATA[
#if defined(USE_TOUCHSCREEN_RESISTIVE)
    // initialize the timer that manages the tick counter
    TickTouchInit();

    #if defined(NVMWrite)
    // initialize the components for Resistive Touch Screen
    TouchInit(NVMWrite, NVMRead, NVMSectorErase, NULL);
    #else
    // No NVM available, force touchscreen calibration
    TouchInit(NULL, NULL, NULL, NULL); 
    #endif
#endif // USE_TOUCHSCREEN_RESISTIVE
    HardwareButtonInit(); // Initialize the hardware buttons

]]>
            </Section>
        </MLA>
        <Harmony>
            <Section Name="HardwareProfileHead">
<![CDATA[
// CLOCK
#define SYS_CLK_CONFIG_PRIMARY_XTAL                     20000000UL
#define SYS_CLK_CONFIG_SECONDARY_XTAL                   2000000UL
#define SYS_CLK_CONFIGBIT_USBPLL_ENABLE                 true
#define SYS_CLK_CONFIGBIT_USBPLL_DIVISOR                2
#define SYS_CLK_CONFIG_SYSPLL_INP_DIVISOR               2
#define SYS_CLK_CONFIG_EXTERNAL_CLOCK                   40000000UL
#define SYS_CLK_CONFIG_FREQ_ERROR_LIMIT                 10
#define SYS_CLK_CONFIG_REFCLK_EDIT_SYSPLL               true
#define SYS_CLOCK_USB_CLOCK                             48000000

#define SYS_DEVCON_SYSTEM_CLOCK        80000000L // System clock frequency
#define SYS_DEVCON_PIC32MX_MAX_PB_FREQ 80000000L // Maximum peripheral bus frequency
]]>
            </Section>
            <Section Name="HardwareProfileHead">
<![CDATA[
// CLOCK
#define SYS_CLK_CONFIG_PRIMARY_XTAL                     20000000UL
#define SYS_CLK_CONFIG_SECONDARY_XTAL                   2000000UL
#define SYS_CLK_CONFIGBIT_USBPLL_ENABLE                 true
#define SYS_CLK_CONFIGBIT_USBPLL_DIVISOR                2
#define SYS_CLK_CONFIG_SYSPLL_INP_DIVISOR               2
#define SYS_CLK_CONFIG_EXTERNAL_CLOCK                   40000000UL
#define SYS_CLK_CONFIG_FREQ_ERROR_LIMIT                 10
#define SYS_CLK_CONFIG_REFCLK_EDIT_SYSPLL               true
#define SYS_CLOCK_USB_CLOCK                             48000000

#define SYS_DEVCON_SYSTEM_CLOCK        80000000L // System clock frequency 
#define SYS_DEVCON_PIC32MX_MAX_PB_FREQ 80000000L // Maximum peripheral bus frequency
]]>
            </Section>
            <Section Name="SystemSettings" Order="0">
<![CDATA[
SYS_MODULE_OBJ gPmpDriverObject;
]]>
            </Section>
            <Section Name="InitializeBoard" Order="0">
<![CDATA[
   /////////////////////////////////////////////////////////////////////////////
   // ADC Explorer 16 Development Board Errata (work around 2)
   // RB15 should be output
   /////////////////////////////////////////////////////////////////////////////
    LATBbits.LATB15 = 0;
    TRISBbits.TRISB15 = 0;
    AD1PCFG = 0x0000FFFF;        // all ADC channel set to digital except the ADC pins for Resistive Touch Panel

    SYS_DEVCON_INIT    devInitConfig;

    // Populate the devcon initialization structure
    devInitConfig.moduleInit.value     = SYS_MODULE_POWER_RUN_FULL;

    SYS_DEVCON_Initialize (SYS_DEVCON_INDEX_0, (SYS_MODULE_INIT*)&devInitConfig);
    SYS_DEVCON_PerformanceConfig( SYS_DEVCON_SYSTEM_CLOCK );

    /* Initializethe interrupt system  */
    SYS_INT_Initialize();

      /* set priority for PMP interrupt source */
    SYS_INT_VectorPrioritySet(INT_VECTOR_PMP, INT_PRIORITY_LEVEL6);

    /* Initialize the global interrupts */
    SYS_INT_Enable();

    SYS_MSG_MESSAGING_OBJECT oSysMsg;
    SYS_MSG_INIT sSysMsgInit;
    uint16_t nQSizes[] = SYS_MSG_BUFFER_SIZES;

    sSysMsgInit.nMaxMsgsDelivered  = SYS_MSG_MAX_MSGS_DELIVERED;
    sSysMsgInit.nMessagePriorities = SYS_MSG_MAX_PRIORITY+1;
    sSysMsgInit.nQSizes = nQSizes;

    hSysMsg = SYS_MSG_Initialize(iSysMsg,(SYS_OBJ_HANDLE)&sSysMsgInit);
    oSysMsg = *(SYS_MSG_MESSAGING_OBJECT *)hSysMsg;

    hMsgType = SYS_MSG_TypeCreate(iSysMsg, TYPE_TOUCHSCREEN , 0);
    hMailbox = SYS_MSB_MailboxOpen( iSysMsg, (SYS_MSG_RECEIVE_CALLBACK)&TouchMessageCallback );

    SYS_MSG_MailboxMsgAdd(hMailbox,hMsgType);
]]>
            </Section>
            <Section Name="InitializeBoard" Order="4">
<![CDATA[
    // PMP init configuration structure
    DRV_PMP_INIT     init;
    init.polarity.addressLatchPolarity = PMP_POLARITY_ACTIVE_HIGH;
    init.polarity.rwStrobePolarity = PMP_POLARITY_ACTIVE_LOW;
    init.polarity.writeEnableStrobePolarity = PMP_POLARITY_ACTIVE_LOW;
    init.polarity.chipselect1Polarity = PMP_POLARITY_ACTIVE_HIGH;
    init.polarity.chipselect2Polarity = PMP_POLARITY_ACTIVE_LOW;
    init.ports.readWriteStrobe = PORT_ENABLE;
    init.ports.writeEnableStrobe = PORT_ENABLE;
    init.moduleInit.value = SYS_MODULE_POWER_RUN_FULL;
    init.pmpID            = PMP_ID_0;
    init.stopInIdle       = false;
    init.muxMode          = PMP_MUX_NONE;

    gPmpDriverObject = DRV_PMP_Initialize (DRV_PMP_INDEX_0, (SYS_MODULE_INIT *)&init);

    // System module initialization
    GFX_INIT gfxInit = {
        .moduleInit = SYS_MODULE_POWER_IDLE_RUN
    };
    GFX_Initialize(GFX_INDEX_0, (SYS_MODULE_INIT *) &gfxInit);
    
    /* Initialize the Application */
    APP_Initialize ( );
]]>
            </Section>
        </Harmony>
        <Section Name="HardwareProfile" Option="chkSPIeeprom">
<![CDATA[
// --------------------------------------------------------------------
// SPI Eeprom MCHP25LC256 Memory on Explorer16 
// --------------------------------------------------------------------
// Set up the signals used to communicate to the SPI Flash device 

// define the SPI channel to be used
#define MCHP25LC256_SPI_CHANNEL 2

/* Define all the SPI channels that will be used here.
    These will be used to determine how the SPI Driver (drv_spi)
    will be compiled.
*/
#define SPI_CHANNEL_2_ENABLE

// Clock, SDO and SDI signals
#if defined(__dsPIC33FJ128GP804__) || defined(__PIC24HJ128GP504__)
    #define MCHP25LC256_SCK_TRIS TRISCbits.TRISC2
    #define MCHP25LC256_SDO_TRIS TRISCbits.TRISC0
    #define MCHP25LC256_SDI_TRIS TRISCbits.TRISC1
#else
    #define MCHP25LC256_SCK_TRIS TRISGbits.TRISG6
    #define MCHP25LC256_SDO_TRIS TRISGbits.TRISG8
    #define MCHP25LC256_SDI_TRIS TRISGbits.TRISG7
#endif
]]>
        </Section>
        <Section Name="InitializeBoard" Order="3">
<![CDATA[
    // set the peripheral pin select for the SPI channel used
    #if defined(__dsPIC33FJ128GP804__) || defined(__PIC24HJ128GP504__)
        AD1PCFGL = 0xFFFF;
        RPOR9bits.RP18R = 11; // assign RP18 for SCK2
        RPOR8bits.RP16R = 10; // assign RP16 for SDO2
        RPINR22bits.SDI2R = 17; // assign RP17 for SDI2
    #elif defined(__PIC24FJ256GB110__) || defined(__PIC24FJ256GA110__) || defined (__PIC24FJ256GB210__)
        __builtin_write_OSCCONL(OSCCON & 0xbf); // unlock PPS
        RPOR10bits.RP21R = 11; // assign RP21 for SCK2
        RPOR9bits.RP19R = 10; // assign RP19 for SDO2
        RPINR22bits.SDI2R = 26; // assign RP26 for SDI2
        __builtin_write_OSCCONL(OSCCON | 0x40); // lock   PPS
    #endif
]]>
        </Section>
    </Code>
</Board>
